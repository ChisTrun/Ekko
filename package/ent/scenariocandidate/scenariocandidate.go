// Code generated by ent, DO NOT EDIT.

package scenariocandidate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scenariocandidate type in the database.
	Label = "scenario_candidate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCandidateID holds the string denoting the candidate_id field in the database.
	FieldCandidateID = "candidate_id"
	// FieldScenarioID holds the string denoting the scenario_id field in the database.
	FieldScenarioID = "scenario_id"
	// EdgeScenario holds the string denoting the scenario edge name in mutations.
	EdgeScenario = "scenario"
	// EdgeAttempts holds the string denoting the attempts edge name in mutations.
	EdgeAttempts = "attempts"
	// Table holds the table name of the scenariocandidate in the database.
	Table = "scenario_candidates"
	// ScenarioTable is the table that holds the scenario relation/edge.
	ScenarioTable = "scenario_candidates"
	// ScenarioInverseTable is the table name for the Scenario entity.
	// It exists in this package in order to avoid circular dependency with the "scenario" package.
	ScenarioInverseTable = "scenarios"
	// ScenarioColumn is the table column denoting the scenario relation/edge.
	ScenarioColumn = "scenario_id"
	// AttemptsTable is the table that holds the attempts relation/edge.
	AttemptsTable = "submission_attempts"
	// AttemptsInverseTable is the table name for the SubmissionAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "submissionattempt" package.
	AttemptsInverseTable = "submission_attempts"
	// AttemptsColumn is the table column denoting the attempts relation/edge.
	AttemptsColumn = "scenario_candidate_id"
)

// Columns holds all SQL columns for scenariocandidate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCandidateID,
	FieldScenarioID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ScenarioCandidate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCandidateID orders the results by the candidate_id field.
func ByCandidateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateID, opts...).ToFunc()
}

// ByScenarioID orders the results by the scenario_id field.
func ByScenarioID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenarioID, opts...).ToFunc()
}

// ByScenarioField orders the results by scenario field.
func ByScenarioField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScenarioStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttemptsCount orders the results by attempts count.
func ByAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttemptsStep(), opts...)
	}
}

// ByAttempts orders the results by attempts terms.
func ByAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newScenarioStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScenarioInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScenarioTable, ScenarioColumn),
	)
}
func newAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttemptsTable, AttemptsColumn),
	)
}
