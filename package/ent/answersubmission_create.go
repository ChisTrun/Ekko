// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	ekko "ekko/api"
	"ekko/package/ent/answersubmission"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerSubmissionCreate is the builder for creating a AnswerSubmission entity.
type AnswerSubmissionCreate struct {
	config
	mutation *AnswerSubmissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (asc *AnswerSubmissionCreate) SetCreatedAt(t time.Time) *AnswerSubmissionCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AnswerSubmissionCreate) SetNillableCreatedAt(t *time.Time) *AnswerSubmissionCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AnswerSubmissionCreate) SetUpdatedAt(t time.Time) *AnswerSubmissionCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AnswerSubmissionCreate) SetNillableUpdatedAt(t *time.Time) *AnswerSubmissionCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (asc *AnswerSubmissionCreate) SetSubmissionAttemptID(u uint64) *AnswerSubmissionCreate {
	asc.mutation.SetSubmissionAttemptID(u)
	return asc
}

// SetQuestionID sets the "question_id" field.
func (asc *AnswerSubmissionCreate) SetQuestionID(u uint64) *AnswerSubmissionCreate {
	asc.mutation.SetQuestionID(u)
	return asc
}

// SetAnswer sets the "answer" field.
func (asc *AnswerSubmissionCreate) SetAnswer(s string) *AnswerSubmissionCreate {
	asc.mutation.SetAnswer(s)
	return asc
}

// SetRelevance sets the "relevance" field.
func (asc *AnswerSubmissionCreate) SetRelevance(f float64) *AnswerSubmissionCreate {
	asc.mutation.SetRelevance(f)
	return asc
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (asc *AnswerSubmissionCreate) SetClarityCompleteness(f float64) *AnswerSubmissionCreate {
	asc.mutation.SetClarityCompleteness(f)
	return asc
}

// SetAccuracy sets the "accuracy" field.
func (asc *AnswerSubmissionCreate) SetAccuracy(f float64) *AnswerSubmissionCreate {
	asc.mutation.SetAccuracy(f)
	return asc
}

// SetOverall sets the "overall" field.
func (asc *AnswerSubmissionCreate) SetOverall(f float64) *AnswerSubmissionCreate {
	asc.mutation.SetOverall(f)
	return asc
}

// SetStatus sets the "status" field.
func (asc *AnswerSubmissionCreate) SetStatus(es ekko.SubmissionStatus) *AnswerSubmissionCreate {
	asc.mutation.SetStatus(es)
	return asc
}

// SetID sets the "id" field.
func (asc *AnswerSubmissionCreate) SetID(u uint64) *AnswerSubmissionCreate {
	asc.mutation.SetID(u)
	return asc
}

// Mutation returns the AnswerSubmissionMutation object of the builder.
func (asc *AnswerSubmissionCreate) Mutation() *AnswerSubmissionMutation {
	return asc.mutation
}

// Save creates the AnswerSubmission in the database.
func (asc *AnswerSubmissionCreate) Save(ctx context.Context) (*AnswerSubmission, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AnswerSubmissionCreate) SaveX(ctx context.Context) *AnswerSubmission {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AnswerSubmissionCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AnswerSubmissionCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AnswerSubmissionCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := answersubmission.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := answersubmission.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AnswerSubmissionCreate) check() error {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AnswerSubmission.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AnswerSubmission.updated_at"`)}
	}
	if _, ok := asc.mutation.SubmissionAttemptID(); !ok {
		return &ValidationError{Name: "submission_attempt_id", err: errors.New(`ent: missing required field "AnswerSubmission.submission_attempt_id"`)}
	}
	if _, ok := asc.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "AnswerSubmission.question_id"`)}
	}
	if _, ok := asc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "AnswerSubmission.answer"`)}
	}
	if _, ok := asc.mutation.Relevance(); !ok {
		return &ValidationError{Name: "relevance", err: errors.New(`ent: missing required field "AnswerSubmission.relevance"`)}
	}
	if _, ok := asc.mutation.ClarityCompleteness(); !ok {
		return &ValidationError{Name: "clarity_completeness", err: errors.New(`ent: missing required field "AnswerSubmission.clarity_completeness"`)}
	}
	if _, ok := asc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "AnswerSubmission.accuracy"`)}
	}
	if _, ok := asc.mutation.Overall(); !ok {
		return &ValidationError{Name: "overall", err: errors.New(`ent: missing required field "AnswerSubmission.overall"`)}
	}
	if _, ok := asc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AnswerSubmission.status"`)}
	}
	return nil
}

func (asc *AnswerSubmissionCreate) sqlSave(ctx context.Context) (*AnswerSubmission, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AnswerSubmissionCreate) createSpec() (*AnswerSubmission, *sqlgraph.CreateSpec) {
	var (
		_node = &AnswerSubmission{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(answersubmission.Table, sqlgraph.NewFieldSpec(answersubmission.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(answersubmission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(answersubmission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.SubmissionAttemptID(); ok {
		_spec.SetField(answersubmission.FieldSubmissionAttemptID, field.TypeUint64, value)
		_node.SubmissionAttemptID = value
	}
	if value, ok := asc.mutation.QuestionID(); ok {
		_spec.SetField(answersubmission.FieldQuestionID, field.TypeUint64, value)
		_node.QuestionID = value
	}
	if value, ok := asc.mutation.Answer(); ok {
		_spec.SetField(answersubmission.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if value, ok := asc.mutation.Relevance(); ok {
		_spec.SetField(answersubmission.FieldRelevance, field.TypeFloat64, value)
		_node.Relevance = value
	}
	if value, ok := asc.mutation.ClarityCompleteness(); ok {
		_spec.SetField(answersubmission.FieldClarityCompleteness, field.TypeFloat64, value)
		_node.ClarityCompleteness = value
	}
	if value, ok := asc.mutation.Accuracy(); ok {
		_spec.SetField(answersubmission.FieldAccuracy, field.TypeFloat64, value)
		_node.Accuracy = value
	}
	if value, ok := asc.mutation.Overall(); ok {
		_spec.SetField(answersubmission.FieldOverall, field.TypeFloat64, value)
		_node.Overall = value
	}
	if value, ok := asc.mutation.Status(); ok {
		_spec.SetField(answersubmission.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AnswerSubmission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnswerSubmissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (asc *AnswerSubmissionCreate) OnConflict(opts ...sql.ConflictOption) *AnswerSubmissionUpsertOne {
	asc.conflict = opts
	return &AnswerSubmissionUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AnswerSubmissionCreate) OnConflictColumns(columns ...string) *AnswerSubmissionUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AnswerSubmissionUpsertOne{
		create: asc,
	}
}

type (
	// AnswerSubmissionUpsertOne is the builder for "upsert"-ing
	//  one AnswerSubmission node.
	AnswerSubmissionUpsertOne struct {
		create *AnswerSubmissionCreate
	}

	// AnswerSubmissionUpsert is the "OnConflict" setter.
	AnswerSubmissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AnswerSubmissionUpsert) SetUpdatedAt(v time.Time) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateUpdatedAt() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldUpdatedAt)
	return u
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsert) SetSubmissionAttemptID(v uint64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldSubmissionAttemptID, v)
	return u
}

// UpdateSubmissionAttemptID sets the "submission_attempt_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateSubmissionAttemptID() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldSubmissionAttemptID)
	return u
}

// AddSubmissionAttemptID adds v to the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsert) AddSubmissionAttemptID(v uint64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldSubmissionAttemptID, v)
	return u
}

// SetQuestionID sets the "question_id" field.
func (u *AnswerSubmissionUpsert) SetQuestionID(v uint64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldQuestionID, v)
	return u
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateQuestionID() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldQuestionID)
	return u
}

// AddQuestionID adds v to the "question_id" field.
func (u *AnswerSubmissionUpsert) AddQuestionID(v uint64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldQuestionID, v)
	return u
}

// SetAnswer sets the "answer" field.
func (u *AnswerSubmissionUpsert) SetAnswer(v string) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldAnswer, v)
	return u
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateAnswer() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldAnswer)
	return u
}

// SetRelevance sets the "relevance" field.
func (u *AnswerSubmissionUpsert) SetRelevance(v float64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldRelevance, v)
	return u
}

// UpdateRelevance sets the "relevance" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateRelevance() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldRelevance)
	return u
}

// AddRelevance adds v to the "relevance" field.
func (u *AnswerSubmissionUpsert) AddRelevance(v float64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldRelevance, v)
	return u
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (u *AnswerSubmissionUpsert) SetClarityCompleteness(v float64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldClarityCompleteness, v)
	return u
}

// UpdateClarityCompleteness sets the "clarity_completeness" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateClarityCompleteness() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldClarityCompleteness)
	return u
}

// AddClarityCompleteness adds v to the "clarity_completeness" field.
func (u *AnswerSubmissionUpsert) AddClarityCompleteness(v float64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldClarityCompleteness, v)
	return u
}

// SetAccuracy sets the "accuracy" field.
func (u *AnswerSubmissionUpsert) SetAccuracy(v float64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldAccuracy, v)
	return u
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateAccuracy() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldAccuracy)
	return u
}

// AddAccuracy adds v to the "accuracy" field.
func (u *AnswerSubmissionUpsert) AddAccuracy(v float64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldAccuracy, v)
	return u
}

// SetOverall sets the "overall" field.
func (u *AnswerSubmissionUpsert) SetOverall(v float64) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldOverall, v)
	return u
}

// UpdateOverall sets the "overall" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateOverall() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldOverall)
	return u
}

// AddOverall adds v to the "overall" field.
func (u *AnswerSubmissionUpsert) AddOverall(v float64) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldOverall, v)
	return u
}

// SetStatus sets the "status" field.
func (u *AnswerSubmissionUpsert) SetStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsert {
	u.Set(answersubmission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnswerSubmissionUpsert) UpdateStatus() *AnswerSubmissionUpsert {
	u.SetExcluded(answersubmission.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AnswerSubmissionUpsert) AddStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsert {
	u.Add(answersubmission.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(answersubmission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AnswerSubmissionUpsertOne) UpdateNewValues() *AnswerSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(answersubmission.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(answersubmission.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AnswerSubmissionUpsertOne) Ignore() *AnswerSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnswerSubmissionUpsertOne) DoNothing() *AnswerSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnswerSubmissionCreate.OnConflict
// documentation for more info.
func (u *AnswerSubmissionUpsertOne) Update(set func(*AnswerSubmissionUpsert)) *AnswerSubmissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnswerSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnswerSubmissionUpsertOne) SetUpdatedAt(v time.Time) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateUpdatedAt() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsertOne) SetSubmissionAttemptID(v uint64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetSubmissionAttemptID(v)
	})
}

// AddSubmissionAttemptID adds v to the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsertOne) AddSubmissionAttemptID(v uint64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddSubmissionAttemptID(v)
	})
}

// UpdateSubmissionAttemptID sets the "submission_attempt_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateSubmissionAttemptID() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateSubmissionAttemptID()
	})
}

// SetQuestionID sets the "question_id" field.
func (u *AnswerSubmissionUpsertOne) SetQuestionID(v uint64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetQuestionID(v)
	})
}

// AddQuestionID adds v to the "question_id" field.
func (u *AnswerSubmissionUpsertOne) AddQuestionID(v uint64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddQuestionID(v)
	})
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateQuestionID() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateQuestionID()
	})
}

// SetAnswer sets the "answer" field.
func (u *AnswerSubmissionUpsertOne) SetAnswer(v string) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateAnswer() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateAnswer()
	})
}

// SetRelevance sets the "relevance" field.
func (u *AnswerSubmissionUpsertOne) SetRelevance(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetRelevance(v)
	})
}

// AddRelevance adds v to the "relevance" field.
func (u *AnswerSubmissionUpsertOne) AddRelevance(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddRelevance(v)
	})
}

// UpdateRelevance sets the "relevance" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateRelevance() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateRelevance()
	})
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (u *AnswerSubmissionUpsertOne) SetClarityCompleteness(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetClarityCompleteness(v)
	})
}

// AddClarityCompleteness adds v to the "clarity_completeness" field.
func (u *AnswerSubmissionUpsertOne) AddClarityCompleteness(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddClarityCompleteness(v)
	})
}

// UpdateClarityCompleteness sets the "clarity_completeness" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateClarityCompleteness() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateClarityCompleteness()
	})
}

// SetAccuracy sets the "accuracy" field.
func (u *AnswerSubmissionUpsertOne) SetAccuracy(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetAccuracy(v)
	})
}

// AddAccuracy adds v to the "accuracy" field.
func (u *AnswerSubmissionUpsertOne) AddAccuracy(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddAccuracy(v)
	})
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateAccuracy() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateAccuracy()
	})
}

// SetOverall sets the "overall" field.
func (u *AnswerSubmissionUpsertOne) SetOverall(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetOverall(v)
	})
}

// AddOverall adds v to the "overall" field.
func (u *AnswerSubmissionUpsertOne) AddOverall(v float64) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddOverall(v)
	})
}

// UpdateOverall sets the "overall" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateOverall() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateOverall()
	})
}

// SetStatus sets the "status" field.
func (u *AnswerSubmissionUpsertOne) SetStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AnswerSubmissionUpsertOne) AddStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertOne) UpdateStatus() *AnswerSubmissionUpsertOne {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AnswerSubmissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnswerSubmissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnswerSubmissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnswerSubmissionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnswerSubmissionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnswerSubmissionCreateBulk is the builder for creating many AnswerSubmission entities in bulk.
type AnswerSubmissionCreateBulk struct {
	config
	err      error
	builders []*AnswerSubmissionCreate
	conflict []sql.ConflictOption
}

// Save creates the AnswerSubmission entities in the database.
func (ascb *AnswerSubmissionCreateBulk) Save(ctx context.Context) ([]*AnswerSubmission, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AnswerSubmission, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnswerSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AnswerSubmissionCreateBulk) SaveX(ctx context.Context) []*AnswerSubmission {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AnswerSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AnswerSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AnswerSubmission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnswerSubmissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ascb *AnswerSubmissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnswerSubmissionUpsertBulk {
	ascb.conflict = opts
	return &AnswerSubmissionUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AnswerSubmissionCreateBulk) OnConflictColumns(columns ...string) *AnswerSubmissionUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AnswerSubmissionUpsertBulk{
		create: ascb,
	}
}

// AnswerSubmissionUpsertBulk is the builder for "upsert"-ing
// a bulk of AnswerSubmission nodes.
type AnswerSubmissionUpsertBulk struct {
	create *AnswerSubmissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(answersubmission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AnswerSubmissionUpsertBulk) UpdateNewValues() *AnswerSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(answersubmission.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(answersubmission.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AnswerSubmission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AnswerSubmissionUpsertBulk) Ignore() *AnswerSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnswerSubmissionUpsertBulk) DoNothing() *AnswerSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnswerSubmissionCreateBulk.OnConflict
// documentation for more info.
func (u *AnswerSubmissionUpsertBulk) Update(set func(*AnswerSubmissionUpsert)) *AnswerSubmissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnswerSubmissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AnswerSubmissionUpsertBulk) SetUpdatedAt(v time.Time) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateUpdatedAt() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsertBulk) SetSubmissionAttemptID(v uint64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetSubmissionAttemptID(v)
	})
}

// AddSubmissionAttemptID adds v to the "submission_attempt_id" field.
func (u *AnswerSubmissionUpsertBulk) AddSubmissionAttemptID(v uint64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddSubmissionAttemptID(v)
	})
}

// UpdateSubmissionAttemptID sets the "submission_attempt_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateSubmissionAttemptID() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateSubmissionAttemptID()
	})
}

// SetQuestionID sets the "question_id" field.
func (u *AnswerSubmissionUpsertBulk) SetQuestionID(v uint64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetQuestionID(v)
	})
}

// AddQuestionID adds v to the "question_id" field.
func (u *AnswerSubmissionUpsertBulk) AddQuestionID(v uint64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddQuestionID(v)
	})
}

// UpdateQuestionID sets the "question_id" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateQuestionID() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateQuestionID()
	})
}

// SetAnswer sets the "answer" field.
func (u *AnswerSubmissionUpsertBulk) SetAnswer(v string) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateAnswer() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateAnswer()
	})
}

// SetRelevance sets the "relevance" field.
func (u *AnswerSubmissionUpsertBulk) SetRelevance(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetRelevance(v)
	})
}

// AddRelevance adds v to the "relevance" field.
func (u *AnswerSubmissionUpsertBulk) AddRelevance(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddRelevance(v)
	})
}

// UpdateRelevance sets the "relevance" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateRelevance() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateRelevance()
	})
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (u *AnswerSubmissionUpsertBulk) SetClarityCompleteness(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetClarityCompleteness(v)
	})
}

// AddClarityCompleteness adds v to the "clarity_completeness" field.
func (u *AnswerSubmissionUpsertBulk) AddClarityCompleteness(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddClarityCompleteness(v)
	})
}

// UpdateClarityCompleteness sets the "clarity_completeness" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateClarityCompleteness() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateClarityCompleteness()
	})
}

// SetAccuracy sets the "accuracy" field.
func (u *AnswerSubmissionUpsertBulk) SetAccuracy(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetAccuracy(v)
	})
}

// AddAccuracy adds v to the "accuracy" field.
func (u *AnswerSubmissionUpsertBulk) AddAccuracy(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddAccuracy(v)
	})
}

// UpdateAccuracy sets the "accuracy" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateAccuracy() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateAccuracy()
	})
}

// SetOverall sets the "overall" field.
func (u *AnswerSubmissionUpsertBulk) SetOverall(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetOverall(v)
	})
}

// AddOverall adds v to the "overall" field.
func (u *AnswerSubmissionUpsertBulk) AddOverall(v float64) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddOverall(v)
	})
}

// UpdateOverall sets the "overall" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateOverall() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateOverall()
	})
}

// SetStatus sets the "status" field.
func (u *AnswerSubmissionUpsertBulk) SetStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AnswerSubmissionUpsertBulk) AddStatus(v ekko.SubmissionStatus) *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AnswerSubmissionUpsertBulk) UpdateStatus() *AnswerSubmissionUpsertBulk {
	return u.Update(func(s *AnswerSubmissionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *AnswerSubmissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AnswerSubmissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnswerSubmissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnswerSubmissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
