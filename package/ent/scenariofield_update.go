// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/package/ent/predicate"
	"ekko/package/ent/scenario"
	"ekko/package/ent/scenariofield"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioFieldUpdate is the builder for updating ScenarioField entities.
type ScenarioFieldUpdate struct {
	config
	hooks     []Hook
	mutation  *ScenarioFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScenarioFieldUpdate builder.
func (sfu *ScenarioFieldUpdate) Where(ps ...predicate.ScenarioField) *ScenarioFieldUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetUpdatedAt sets the "updated_at" field.
func (sfu *ScenarioFieldUpdate) SetUpdatedAt(t time.Time) *ScenarioFieldUpdate {
	sfu.mutation.SetUpdatedAt(t)
	return sfu
}

// SetName sets the "name" field.
func (sfu *ScenarioFieldUpdate) SetName(s string) *ScenarioFieldUpdate {
	sfu.mutation.SetName(s)
	return sfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sfu *ScenarioFieldUpdate) SetNillableName(s *string) *ScenarioFieldUpdate {
	if s != nil {
		sfu.SetName(*s)
	}
	return sfu
}

// SetSenariosID sets the "senarios" edge to the Scenario entity by ID.
func (sfu *ScenarioFieldUpdate) SetSenariosID(id uint64) *ScenarioFieldUpdate {
	sfu.mutation.SetSenariosID(id)
	return sfu
}

// SetNillableSenariosID sets the "senarios" edge to the Scenario entity by ID if the given value is not nil.
func (sfu *ScenarioFieldUpdate) SetNillableSenariosID(id *uint64) *ScenarioFieldUpdate {
	if id != nil {
		sfu = sfu.SetSenariosID(*id)
	}
	return sfu
}

// SetSenarios sets the "senarios" edge to the Scenario entity.
func (sfu *ScenarioFieldUpdate) SetSenarios(s *Scenario) *ScenarioFieldUpdate {
	return sfu.SetSenariosID(s.ID)
}

// Mutation returns the ScenarioFieldMutation object of the builder.
func (sfu *ScenarioFieldUpdate) Mutation() *ScenarioFieldMutation {
	return sfu.mutation
}

// ClearSenarios clears the "senarios" edge to the Scenario entity.
func (sfu *ScenarioFieldUpdate) ClearSenarios() *ScenarioFieldUpdate {
	sfu.mutation.ClearSenarios()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *ScenarioFieldUpdate) Save(ctx context.Context) (int, error) {
	sfu.defaults()
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *ScenarioFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *ScenarioFieldUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *ScenarioFieldUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfu *ScenarioFieldUpdate) defaults() {
	if _, ok := sfu.mutation.UpdatedAt(); !ok {
		v := scenariofield.UpdateDefaultUpdatedAt()
		sfu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sfu *ScenarioFieldUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioFieldUpdate {
	sfu.modifiers = append(sfu.modifiers, modifiers...)
	return sfu
}

func (sfu *ScenarioFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenariofield.Table, scenariofield.Columns, sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariofield.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sfu.mutation.Name(); ok {
		_spec.SetField(scenariofield.FieldName, field.TypeString, value)
	}
	if sfu.mutation.SenariosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scenariofield.SenariosTable,
			Columns: []string{scenariofield.SenariosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.SenariosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scenariofield.SenariosTable,
			Columns: []string{scenariofield.SenariosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenariofield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// ScenarioFieldUpdateOne is the builder for updating a single ScenarioField entity.
type ScenarioFieldUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScenarioFieldMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sfuo *ScenarioFieldUpdateOne) SetUpdatedAt(t time.Time) *ScenarioFieldUpdateOne {
	sfuo.mutation.SetUpdatedAt(t)
	return sfuo
}

// SetName sets the "name" field.
func (sfuo *ScenarioFieldUpdateOne) SetName(s string) *ScenarioFieldUpdateOne {
	sfuo.mutation.SetName(s)
	return sfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sfuo *ScenarioFieldUpdateOne) SetNillableName(s *string) *ScenarioFieldUpdateOne {
	if s != nil {
		sfuo.SetName(*s)
	}
	return sfuo
}

// SetSenariosID sets the "senarios" edge to the Scenario entity by ID.
func (sfuo *ScenarioFieldUpdateOne) SetSenariosID(id uint64) *ScenarioFieldUpdateOne {
	sfuo.mutation.SetSenariosID(id)
	return sfuo
}

// SetNillableSenariosID sets the "senarios" edge to the Scenario entity by ID if the given value is not nil.
func (sfuo *ScenarioFieldUpdateOne) SetNillableSenariosID(id *uint64) *ScenarioFieldUpdateOne {
	if id != nil {
		sfuo = sfuo.SetSenariosID(*id)
	}
	return sfuo
}

// SetSenarios sets the "senarios" edge to the Scenario entity.
func (sfuo *ScenarioFieldUpdateOne) SetSenarios(s *Scenario) *ScenarioFieldUpdateOne {
	return sfuo.SetSenariosID(s.ID)
}

// Mutation returns the ScenarioFieldMutation object of the builder.
func (sfuo *ScenarioFieldUpdateOne) Mutation() *ScenarioFieldMutation {
	return sfuo.mutation
}

// ClearSenarios clears the "senarios" edge to the Scenario entity.
func (sfuo *ScenarioFieldUpdateOne) ClearSenarios() *ScenarioFieldUpdateOne {
	sfuo.mutation.ClearSenarios()
	return sfuo
}

// Where appends a list predicates to the ScenarioFieldUpdate builder.
func (sfuo *ScenarioFieldUpdateOne) Where(ps ...predicate.ScenarioField) *ScenarioFieldUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *ScenarioFieldUpdateOne) Select(field string, fields ...string) *ScenarioFieldUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated ScenarioField entity.
func (sfuo *ScenarioFieldUpdateOne) Save(ctx context.Context) (*ScenarioField, error) {
	sfuo.defaults()
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *ScenarioFieldUpdateOne) SaveX(ctx context.Context) *ScenarioField {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *ScenarioFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *ScenarioFieldUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfuo *ScenarioFieldUpdateOne) defaults() {
	if _, ok := sfuo.mutation.UpdatedAt(); !ok {
		v := scenariofield.UpdateDefaultUpdatedAt()
		sfuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sfuo *ScenarioFieldUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioFieldUpdateOne {
	sfuo.modifiers = append(sfuo.modifiers, modifiers...)
	return sfuo
}

func (sfuo *ScenarioFieldUpdateOne) sqlSave(ctx context.Context) (_node *ScenarioField, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenariofield.Table, scenariofield.Columns, sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScenarioField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenariofield.FieldID)
		for _, f := range fields {
			if !scenariofield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenariofield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariofield.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sfuo.mutation.Name(); ok {
		_spec.SetField(scenariofield.FieldName, field.TypeString, value)
	}
	if sfuo.mutation.SenariosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scenariofield.SenariosTable,
			Columns: []string{scenariofield.SenariosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.SenariosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scenariofield.SenariosTable,
			Columns: []string{scenariofield.SenariosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sfuo.modifiers...)
	_node = &ScenarioField{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenariofield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
