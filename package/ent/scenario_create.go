// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/package/ent/question"
	"ekko/package/ent/scenario"
	"ekko/package/ent/scenariocandidate"
	"ekko/package/ent/scenariofavorite"
	"ekko/package/ent/scenariofield"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioCreate is the builder for creating a Scenario entity.
type ScenarioCreate struct {
	config
	mutation *ScenarioMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScenarioCreate) SetCreatedAt(t time.Time) *ScenarioCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableCreatedAt(t *time.Time) *ScenarioCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScenarioCreate) SetUpdatedAt(t time.Time) *ScenarioCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableUpdatedAt(t *time.Time) *ScenarioCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetBmID sets the "bm_id" field.
func (sc *ScenarioCreate) SetBmID(u uint64) *ScenarioCreate {
	sc.mutation.SetBmID(u)
	return sc
}

// SetName sets the "name" field.
func (sc *ScenarioCreate) SetName(s string) *ScenarioCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *ScenarioCreate) SetDescription(s string) *ScenarioCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetRating sets the "rating" field.
func (sc *ScenarioCreate) SetRating(f float64) *ScenarioCreate {
	sc.mutation.SetRating(f)
	return sc
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableRating(f *float64) *ScenarioCreate {
	if f != nil {
		sc.SetRating(*f)
	}
	return sc
}

// SetParticipants sets the "participants" field.
func (sc *ScenarioCreate) SetParticipants(i int32) *ScenarioCreate {
	sc.mutation.SetParticipants(i)
	return sc
}

// SetNillableParticipants sets the "participants" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableParticipants(i *int32) *ScenarioCreate {
	if i != nil {
		sc.SetParticipants(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScenarioCreate) SetID(u uint64) *ScenarioCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (sc *ScenarioCreate) AddQuestionIDs(ids ...uint64) *ScenarioCreate {
	sc.mutation.AddQuestionIDs(ids...)
	return sc
}

// AddQuestions adds the "questions" edges to the Question entity.
func (sc *ScenarioCreate) AddQuestions(q ...*Question) *ScenarioCreate {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return sc.AddQuestionIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the ScenarioCandidate entity by IDs.
func (sc *ScenarioCreate) AddCandidateIDs(ids ...uint64) *ScenarioCreate {
	sc.mutation.AddCandidateIDs(ids...)
	return sc
}

// AddCandidates adds the "candidates" edges to the ScenarioCandidate entity.
func (sc *ScenarioCreate) AddCandidates(s ...*ScenarioCandidate) *ScenarioCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddCandidateIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the ScenarioFavorite entity by IDs.
func (sc *ScenarioCreate) AddFavoriteIDs(ids ...uint64) *ScenarioCreate {
	sc.mutation.AddFavoriteIDs(ids...)
	return sc
}

// AddFavorites adds the "favorites" edges to the ScenarioFavorite entity.
func (sc *ScenarioCreate) AddFavorites(s ...*ScenarioFavorite) *ScenarioCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddFavoriteIDs(ids...)
}

// AddFieldIDs adds the "field" edge to the ScenarioField entity by IDs.
func (sc *ScenarioCreate) AddFieldIDs(ids ...uint64) *ScenarioCreate {
	sc.mutation.AddFieldIDs(ids...)
	return sc
}

// AddField adds the "field" edges to the ScenarioField entity.
func (sc *ScenarioCreate) AddField(s ...*ScenarioField) *ScenarioCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddFieldIDs(ids...)
}

// Mutation returns the ScenarioMutation object of the builder.
func (sc *ScenarioCreate) Mutation() *ScenarioMutation {
	return sc.mutation
}

// Save creates the Scenario in the database.
func (sc *ScenarioCreate) Save(ctx context.Context) (*Scenario, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScenarioCreate) SaveX(ctx context.Context) *Scenario {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScenarioCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScenarioCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScenarioCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := scenario.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := scenario.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Rating(); !ok {
		v := scenario.DefaultRating
		sc.mutation.SetRating(v)
	}
	if _, ok := sc.mutation.Participants(); !ok {
		v := scenario.DefaultParticipants
		sc.mutation.SetParticipants(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScenarioCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Scenario.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Scenario.updated_at"`)}
	}
	if _, ok := sc.mutation.BmID(); !ok {
		return &ValidationError{Name: "bm_id", err: errors.New(`ent: missing required field "Scenario.bm_id"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Scenario.name"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Scenario.description"`)}
	}
	if _, ok := sc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Scenario.rating"`)}
	}
	if _, ok := sc.mutation.Participants(); !ok {
		return &ValidationError{Name: "participants", err: errors.New(`ent: missing required field "Scenario.participants"`)}
	}
	return nil
}

func (sc *ScenarioCreate) sqlSave(ctx context.Context) (*Scenario, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScenarioCreate) createSpec() (*Scenario, *sqlgraph.CreateSpec) {
	var (
		_node = &Scenario{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(scenario.Table, sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(scenario.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(scenario.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.BmID(); ok {
		_spec.SetField(scenario.FieldBmID, field.TypeUint64, value)
		_node.BmID = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(scenario.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(scenario.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Rating(); ok {
		_spec.SetField(scenario.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	if value, ok := sc.mutation.Participants(); ok {
		_spec.SetField(scenario.FieldParticipants, field.TypeInt32, value)
		_node.Participants = value
	}
	if nodes := sc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scenario.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *ScenarioCreate) OnConflict(opts ...sql.ConflictOption) *ScenarioUpsertOne {
	sc.conflict = opts
	return &ScenarioUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScenarioCreate) OnConflictColumns(columns ...string) *ScenarioUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScenarioUpsertOne{
		create: sc,
	}
}

type (
	// ScenarioUpsertOne is the builder for "upsert"-ing
	//  one Scenario node.
	ScenarioUpsertOne struct {
		create *ScenarioCreate
	}

	// ScenarioUpsert is the "OnConflict" setter.
	ScenarioUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioUpsert) SetUpdatedAt(v time.Time) *ScenarioUpsert {
	u.Set(scenario.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateUpdatedAt() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldUpdatedAt)
	return u
}

// SetBmID sets the "bm_id" field.
func (u *ScenarioUpsert) SetBmID(v uint64) *ScenarioUpsert {
	u.Set(scenario.FieldBmID, v)
	return u
}

// UpdateBmID sets the "bm_id" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateBmID() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldBmID)
	return u
}

// AddBmID adds v to the "bm_id" field.
func (u *ScenarioUpsert) AddBmID(v uint64) *ScenarioUpsert {
	u.Add(scenario.FieldBmID, v)
	return u
}

// SetName sets the "name" field.
func (u *ScenarioUpsert) SetName(v string) *ScenarioUpsert {
	u.Set(scenario.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateName() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ScenarioUpsert) SetDescription(v string) *ScenarioUpsert {
	u.Set(scenario.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateDescription() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldDescription)
	return u
}

// SetRating sets the "rating" field.
func (u *ScenarioUpsert) SetRating(v float64) *ScenarioUpsert {
	u.Set(scenario.FieldRating, v)
	return u
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateRating() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldRating)
	return u
}

// AddRating adds v to the "rating" field.
func (u *ScenarioUpsert) AddRating(v float64) *ScenarioUpsert {
	u.Add(scenario.FieldRating, v)
	return u
}

// SetParticipants sets the "participants" field.
func (u *ScenarioUpsert) SetParticipants(v int32) *ScenarioUpsert {
	u.Set(scenario.FieldParticipants, v)
	return u
}

// UpdateParticipants sets the "participants" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateParticipants() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldParticipants)
	return u
}

// AddParticipants adds v to the "participants" field.
func (u *ScenarioUpsert) AddParticipants(v int32) *ScenarioUpsert {
	u.Add(scenario.FieldParticipants, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenario.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioUpsertOne) UpdateNewValues() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scenario.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scenario.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScenarioUpsertOne) Ignore() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioUpsertOne) DoNothing() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCreate.OnConflict
// documentation for more info.
func (u *ScenarioUpsertOne) Update(set func(*ScenarioUpsert)) *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioUpsertOne) SetUpdatedAt(v time.Time) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateUpdatedAt() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBmID sets the "bm_id" field.
func (u *ScenarioUpsertOne) SetBmID(v uint64) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetBmID(v)
	})
}

// AddBmID adds v to the "bm_id" field.
func (u *ScenarioUpsertOne) AddBmID(v uint64) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddBmID(v)
	})
}

// UpdateBmID sets the "bm_id" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateBmID() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateBmID()
	})
}

// SetName sets the "name" field.
func (u *ScenarioUpsertOne) SetName(v string) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateName() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ScenarioUpsertOne) SetDescription(v string) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateDescription() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDescription()
	})
}

// SetRating sets the "rating" field.
func (u *ScenarioUpsertOne) SetRating(v float64) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *ScenarioUpsertOne) AddRating(v float64) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateRating() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateRating()
	})
}

// SetParticipants sets the "participants" field.
func (u *ScenarioUpsertOne) SetParticipants(v int32) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetParticipants(v)
	})
}

// AddParticipants adds v to the "participants" field.
func (u *ScenarioUpsertOne) AddParticipants(v int32) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddParticipants(v)
	})
}

// UpdateParticipants sets the "participants" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateParticipants() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateParticipants()
	})
}

// Exec executes the query.
func (u *ScenarioUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScenarioUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScenarioUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScenarioCreateBulk is the builder for creating many Scenario entities in bulk.
type ScenarioCreateBulk struct {
	config
	err      error
	builders []*ScenarioCreate
	conflict []sql.ConflictOption
}

// Save creates the Scenario entities in the database.
func (scb *ScenarioCreateBulk) Save(ctx context.Context) ([]*Scenario, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scenario, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenarioMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScenarioCreateBulk) SaveX(ctx context.Context) []*Scenario {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScenarioCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScenarioCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scenario.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *ScenarioCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScenarioUpsertBulk {
	scb.conflict = opts
	return &ScenarioUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScenarioCreateBulk) OnConflictColumns(columns ...string) *ScenarioUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScenarioUpsertBulk{
		create: scb,
	}
}

// ScenarioUpsertBulk is the builder for "upsert"-ing
// a bulk of Scenario nodes.
type ScenarioUpsertBulk struct {
	create *ScenarioCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenario.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioUpsertBulk) UpdateNewValues() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scenario.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scenario.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScenarioUpsertBulk) Ignore() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioUpsertBulk) DoNothing() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCreateBulk.OnConflict
// documentation for more info.
func (u *ScenarioUpsertBulk) Update(set func(*ScenarioUpsert)) *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioUpsertBulk) SetUpdatedAt(v time.Time) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateUpdatedAt() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBmID sets the "bm_id" field.
func (u *ScenarioUpsertBulk) SetBmID(v uint64) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetBmID(v)
	})
}

// AddBmID adds v to the "bm_id" field.
func (u *ScenarioUpsertBulk) AddBmID(v uint64) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddBmID(v)
	})
}

// UpdateBmID sets the "bm_id" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateBmID() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateBmID()
	})
}

// SetName sets the "name" field.
func (u *ScenarioUpsertBulk) SetName(v string) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateName() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ScenarioUpsertBulk) SetDescription(v string) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateDescription() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDescription()
	})
}

// SetRating sets the "rating" field.
func (u *ScenarioUpsertBulk) SetRating(v float64) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *ScenarioUpsertBulk) AddRating(v float64) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateRating() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateRating()
	})
}

// SetParticipants sets the "participants" field.
func (u *ScenarioUpsertBulk) SetParticipants(v int32) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetParticipants(v)
	})
}

// AddParticipants adds v to the "participants" field.
func (u *ScenarioUpsertBulk) AddParticipants(v int32) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.AddParticipants(v)
	})
}

// UpdateParticipants sets the "participants" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateParticipants() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateParticipants()
	})
}

// Exec executes the query.
func (u *ScenarioUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScenarioCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
