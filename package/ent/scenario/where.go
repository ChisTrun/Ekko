// Code generated by ent, DO NOT EDIT.

package scenario

import (
	"ekko/package/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldUpdatedAt, v))
}

// BmID applies equality check predicate on the "bm_id" field. It's identical to BmIDEQ.
func BmID(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldBmID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldDescription, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldRating, v))
}

// Participants applies equality check predicate on the "participants" field. It's identical to ParticipantsEQ.
func Participants(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldParticipants, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldUpdatedAt, v))
}

// BmIDEQ applies the EQ predicate on the "bm_id" field.
func BmIDEQ(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldBmID, v))
}

// BmIDNEQ applies the NEQ predicate on the "bm_id" field.
func BmIDNEQ(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldBmID, v))
}

// BmIDIn applies the In predicate on the "bm_id" field.
func BmIDIn(vs ...uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldBmID, vs...))
}

// BmIDNotIn applies the NotIn predicate on the "bm_id" field.
func BmIDNotIn(vs ...uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldBmID, vs...))
}

// BmIDGT applies the GT predicate on the "bm_id" field.
func BmIDGT(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldBmID, v))
}

// BmIDGTE applies the GTE predicate on the "bm_id" field.
func BmIDGTE(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldBmID, v))
}

// BmIDLT applies the LT predicate on the "bm_id" field.
func BmIDLT(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldBmID, v))
}

// BmIDLTE applies the LTE predicate on the "bm_id" field.
func BmIDLTE(v uint64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldBmID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Scenario {
	return predicate.Scenario(sql.FieldContainsFold(FieldDescription, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float64) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldRating, v))
}

// ParticipantsEQ applies the EQ predicate on the "participants" field.
func ParticipantsEQ(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldEQ(FieldParticipants, v))
}

// ParticipantsNEQ applies the NEQ predicate on the "participants" field.
func ParticipantsNEQ(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldNEQ(FieldParticipants, v))
}

// ParticipantsIn applies the In predicate on the "participants" field.
func ParticipantsIn(vs ...int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldIn(FieldParticipants, vs...))
}

// ParticipantsNotIn applies the NotIn predicate on the "participants" field.
func ParticipantsNotIn(vs ...int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldNotIn(FieldParticipants, vs...))
}

// ParticipantsGT applies the GT predicate on the "participants" field.
func ParticipantsGT(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldGT(FieldParticipants, v))
}

// ParticipantsGTE applies the GTE predicate on the "participants" field.
func ParticipantsGTE(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldGTE(FieldParticipants, v))
}

// ParticipantsLT applies the LT predicate on the "participants" field.
func ParticipantsLT(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldLT(FieldParticipants, v))
}

// ParticipantsLTE applies the LTE predicate on the "participants" field.
func ParticipantsLTE(v int32) predicate.Scenario {
	return predicate.Scenario(sql.FieldLTE(FieldParticipants, v))
}

// HasQuestions applies the HasEdge predicate on the "questions" edge.
func HasQuestions() predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionsWith applies the HasEdge predicate on the "questions" edge with a given conditions (other predicates).
func HasQuestionsWith(preds ...predicate.Question) predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := newQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCandidates applies the HasEdge predicate on the "candidates" edge.
func HasCandidates() predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CandidatesTable, CandidatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCandidatesWith applies the HasEdge predicate on the "candidates" edge with a given conditions (other predicates).
func HasCandidatesWith(preds ...predicate.ScenarioCandidate) predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := newCandidatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavorites applies the HasEdge predicate on the "favorites" edge.
func HasFavorites() predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FavoritesTable, FavoritesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoritesWith applies the HasEdge predicate on the "favorites" edge with a given conditions (other predicates).
func HasFavoritesWith(preds ...predicate.ScenarioFavorite) predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := newFavoritesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasField applies the HasEdge predicate on the "field" edge.
func HasField() predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FieldTable, FieldColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFieldWith applies the HasEdge predicate on the "field" edge with a given conditions (other predicates).
func HasFieldWith(preds ...predicate.ScenarioField) predicate.Scenario {
	return predicate.Scenario(func(s *sql.Selector) {
		step := newFieldStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Scenario) predicate.Scenario {
	return predicate.Scenario(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Scenario) predicate.Scenario {
	return predicate.Scenario(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scenario) predicate.Scenario {
	return predicate.Scenario(sql.NotPredicates(p))
}
