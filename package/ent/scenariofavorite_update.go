// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/package/ent/predicate"
	"ekko/package/ent/scenario"
	"ekko/package/ent/scenariofavorite"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioFavoriteUpdate is the builder for updating ScenarioFavorite entities.
type ScenarioFavoriteUpdate struct {
	config
	hooks     []Hook
	mutation  *ScenarioFavoriteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScenarioFavoriteUpdate builder.
func (sfu *ScenarioFavoriteUpdate) Where(ps ...predicate.ScenarioFavorite) *ScenarioFavoriteUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetUpdatedAt sets the "updated_at" field.
func (sfu *ScenarioFavoriteUpdate) SetUpdatedAt(t time.Time) *ScenarioFavoriteUpdate {
	sfu.mutation.SetUpdatedAt(t)
	return sfu
}

// SetUserID sets the "user_id" field.
func (sfu *ScenarioFavoriteUpdate) SetUserID(u uint64) *ScenarioFavoriteUpdate {
	sfu.mutation.ResetUserID()
	sfu.mutation.SetUserID(u)
	return sfu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sfu *ScenarioFavoriteUpdate) SetNillableUserID(u *uint64) *ScenarioFavoriteUpdate {
	if u != nil {
		sfu.SetUserID(*u)
	}
	return sfu
}

// AddUserID adds u to the "user_id" field.
func (sfu *ScenarioFavoriteUpdate) AddUserID(u int64) *ScenarioFavoriteUpdate {
	sfu.mutation.AddUserID(u)
	return sfu
}

// SetScenarioID sets the "scenario_id" field.
func (sfu *ScenarioFavoriteUpdate) SetScenarioID(u uint64) *ScenarioFavoriteUpdate {
	sfu.mutation.SetScenarioID(u)
	return sfu
}

// SetNillableScenarioID sets the "scenario_id" field if the given value is not nil.
func (sfu *ScenarioFavoriteUpdate) SetNillableScenarioID(u *uint64) *ScenarioFavoriteUpdate {
	if u != nil {
		sfu.SetScenarioID(*u)
	}
	return sfu
}

// SetSenarioID sets the "senario" edge to the Scenario entity by ID.
func (sfu *ScenarioFavoriteUpdate) SetSenarioID(id uint64) *ScenarioFavoriteUpdate {
	sfu.mutation.SetSenarioID(id)
	return sfu
}

// SetSenario sets the "senario" edge to the Scenario entity.
func (sfu *ScenarioFavoriteUpdate) SetSenario(s *Scenario) *ScenarioFavoriteUpdate {
	return sfu.SetSenarioID(s.ID)
}

// Mutation returns the ScenarioFavoriteMutation object of the builder.
func (sfu *ScenarioFavoriteUpdate) Mutation() *ScenarioFavoriteMutation {
	return sfu.mutation
}

// ClearSenario clears the "senario" edge to the Scenario entity.
func (sfu *ScenarioFavoriteUpdate) ClearSenario() *ScenarioFavoriteUpdate {
	sfu.mutation.ClearSenario()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *ScenarioFavoriteUpdate) Save(ctx context.Context) (int, error) {
	sfu.defaults()
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *ScenarioFavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *ScenarioFavoriteUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *ScenarioFavoriteUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfu *ScenarioFavoriteUpdate) defaults() {
	if _, ok := sfu.mutation.UpdatedAt(); !ok {
		v := scenariofavorite.UpdateDefaultUpdatedAt()
		sfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfu *ScenarioFavoriteUpdate) check() error {
	if sfu.mutation.SenarioCleared() && len(sfu.mutation.SenarioIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScenarioFavorite.senario"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sfu *ScenarioFavoriteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioFavoriteUpdate {
	sfu.modifiers = append(sfu.modifiers, modifiers...)
	return sfu
}

func (sfu *ScenarioFavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scenariofavorite.Table, scenariofavorite.Columns, sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariofavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sfu.mutation.UserID(); ok {
		_spec.SetField(scenariofavorite.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := sfu.mutation.AddedUserID(); ok {
		_spec.AddField(scenariofavorite.FieldUserID, field.TypeUint64, value)
	}
	if sfu.mutation.SenarioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariofavorite.SenarioTable,
			Columns: []string{scenariofavorite.SenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.SenarioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariofavorite.SenarioTable,
			Columns: []string{scenariofavorite.SenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenariofavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// ScenarioFavoriteUpdateOne is the builder for updating a single ScenarioFavorite entity.
type ScenarioFavoriteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScenarioFavoriteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sfuo *ScenarioFavoriteUpdateOne) SetUpdatedAt(t time.Time) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.SetUpdatedAt(t)
	return sfuo
}

// SetUserID sets the "user_id" field.
func (sfuo *ScenarioFavoriteUpdateOne) SetUserID(u uint64) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.ResetUserID()
	sfuo.mutation.SetUserID(u)
	return sfuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sfuo *ScenarioFavoriteUpdateOne) SetNillableUserID(u *uint64) *ScenarioFavoriteUpdateOne {
	if u != nil {
		sfuo.SetUserID(*u)
	}
	return sfuo
}

// AddUserID adds u to the "user_id" field.
func (sfuo *ScenarioFavoriteUpdateOne) AddUserID(u int64) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.AddUserID(u)
	return sfuo
}

// SetScenarioID sets the "scenario_id" field.
func (sfuo *ScenarioFavoriteUpdateOne) SetScenarioID(u uint64) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.SetScenarioID(u)
	return sfuo
}

// SetNillableScenarioID sets the "scenario_id" field if the given value is not nil.
func (sfuo *ScenarioFavoriteUpdateOne) SetNillableScenarioID(u *uint64) *ScenarioFavoriteUpdateOne {
	if u != nil {
		sfuo.SetScenarioID(*u)
	}
	return sfuo
}

// SetSenarioID sets the "senario" edge to the Scenario entity by ID.
func (sfuo *ScenarioFavoriteUpdateOne) SetSenarioID(id uint64) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.SetSenarioID(id)
	return sfuo
}

// SetSenario sets the "senario" edge to the Scenario entity.
func (sfuo *ScenarioFavoriteUpdateOne) SetSenario(s *Scenario) *ScenarioFavoriteUpdateOne {
	return sfuo.SetSenarioID(s.ID)
}

// Mutation returns the ScenarioFavoriteMutation object of the builder.
func (sfuo *ScenarioFavoriteUpdateOne) Mutation() *ScenarioFavoriteMutation {
	return sfuo.mutation
}

// ClearSenario clears the "senario" edge to the Scenario entity.
func (sfuo *ScenarioFavoriteUpdateOne) ClearSenario() *ScenarioFavoriteUpdateOne {
	sfuo.mutation.ClearSenario()
	return sfuo
}

// Where appends a list predicates to the ScenarioFavoriteUpdate builder.
func (sfuo *ScenarioFavoriteUpdateOne) Where(ps ...predicate.ScenarioFavorite) *ScenarioFavoriteUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *ScenarioFavoriteUpdateOne) Select(field string, fields ...string) *ScenarioFavoriteUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated ScenarioFavorite entity.
func (sfuo *ScenarioFavoriteUpdateOne) Save(ctx context.Context) (*ScenarioFavorite, error) {
	sfuo.defaults()
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *ScenarioFavoriteUpdateOne) SaveX(ctx context.Context) *ScenarioFavorite {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *ScenarioFavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *ScenarioFavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfuo *ScenarioFavoriteUpdateOne) defaults() {
	if _, ok := sfuo.mutation.UpdatedAt(); !ok {
		v := scenariofavorite.UpdateDefaultUpdatedAt()
		sfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfuo *ScenarioFavoriteUpdateOne) check() error {
	if sfuo.mutation.SenarioCleared() && len(sfuo.mutation.SenarioIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScenarioFavorite.senario"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sfuo *ScenarioFavoriteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioFavoriteUpdateOne {
	sfuo.modifiers = append(sfuo.modifiers, modifiers...)
	return sfuo
}

func (sfuo *ScenarioFavoriteUpdateOne) sqlSave(ctx context.Context) (_node *ScenarioFavorite, err error) {
	if err := sfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scenariofavorite.Table, scenariofavorite.Columns, sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScenarioFavorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenariofavorite.FieldID)
		for _, f := range fields {
			if !scenariofavorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenariofavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariofavorite.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sfuo.mutation.UserID(); ok {
		_spec.SetField(scenariofavorite.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := sfuo.mutation.AddedUserID(); ok {
		_spec.AddField(scenariofavorite.FieldUserID, field.TypeUint64, value)
	}
	if sfuo.mutation.SenarioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariofavorite.SenarioTable,
			Columns: []string{scenariofavorite.SenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.SenarioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariofavorite.SenarioTable,
			Columns: []string{scenariofavorite.SenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sfuo.modifiers...)
	_node = &ScenarioFavorite{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenariofavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
