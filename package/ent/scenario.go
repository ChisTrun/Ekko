// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ekko/package/ent/scenario"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Scenario is the model entity for the Scenario schema.
type Scenario struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BmID holds the value of the "bm_id" field.
	BmID uint64 `json:"bm_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating float64 `json:"rating,omitempty"`
	// Participants holds the value of the "participants" field.
	Participants int32 `json:"participants,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenarioQuery when eager-loading is set.
	Edges        ScenarioEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenarioEdges holds the relations/edges for other nodes in the graph.
type ScenarioEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// Candidates holds the value of the candidates edge.
	Candidates []*ScenarioCandidate `json:"candidates,omitempty"`
	// Favorites holds the value of the favorites edge.
	Favorites []*ScenarioFavorite `json:"favorites,omitempty"`
	// Field holds the value of the field edge.
	Field []*ScenarioField `json:"field,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// CandidatesOrErr returns the Candidates value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioEdges) CandidatesOrErr() ([]*ScenarioCandidate, error) {
	if e.loadedTypes[1] {
		return e.Candidates, nil
	}
	return nil, &NotLoadedError{edge: "candidates"}
}

// FavoritesOrErr returns the Favorites value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioEdges) FavoritesOrErr() ([]*ScenarioFavorite, error) {
	if e.loadedTypes[2] {
		return e.Favorites, nil
	}
	return nil, &NotLoadedError{edge: "favorites"}
}

// FieldOrErr returns the Field value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioEdges) FieldOrErr() ([]*ScenarioField, error) {
	if e.loadedTypes[3] {
		return e.Field, nil
	}
	return nil, &NotLoadedError{edge: "field"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scenario) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenario.FieldRating:
			values[i] = new(sql.NullFloat64)
		case scenario.FieldID, scenario.FieldBmID, scenario.FieldParticipants:
			values[i] = new(sql.NullInt64)
		case scenario.FieldName, scenario.FieldDescription:
			values[i] = new(sql.NullString)
		case scenario.FieldCreatedAt, scenario.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scenario fields.
func (s *Scenario) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenario.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case scenario.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case scenario.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case scenario.FieldBmID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bm_id", values[i])
			} else if value.Valid {
				s.BmID = uint64(value.Int64)
			}
		case scenario.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case scenario.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case scenario.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				s.Rating = value.Float64
			}
		case scenario.FieldParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field participants", values[i])
			} else if value.Valid {
				s.Participants = int32(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scenario.
// This includes values selected through modifiers, order, etc.
func (s *Scenario) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryQuestions queries the "questions" edge of the Scenario entity.
func (s *Scenario) QueryQuestions() *QuestionQuery {
	return NewScenarioClient(s.config).QueryQuestions(s)
}

// QueryCandidates queries the "candidates" edge of the Scenario entity.
func (s *Scenario) QueryCandidates() *ScenarioCandidateQuery {
	return NewScenarioClient(s.config).QueryCandidates(s)
}

// QueryFavorites queries the "favorites" edge of the Scenario entity.
func (s *Scenario) QueryFavorites() *ScenarioFavoriteQuery {
	return NewScenarioClient(s.config).QueryFavorites(s)
}

// QueryField queries the "field" edge of the Scenario entity.
func (s *Scenario) QueryField() *ScenarioFieldQuery {
	return NewScenarioClient(s.config).QueryField(s)
}

// Update returns a builder for updating this Scenario.
// Note that you need to call Scenario.Unwrap() before calling this method if this Scenario
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scenario) Update() *ScenarioUpdateOne {
	return NewScenarioClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scenario entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scenario) Unwrap() *Scenario {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scenario is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scenario) String() string {
	var builder strings.Builder
	builder.WriteString("Scenario(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bm_id=")
	builder.WriteString(fmt.Sprintf("%v", s.BmID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", s.Rating))
	builder.WriteString(", ")
	builder.WriteString("participants=")
	builder.WriteString(fmt.Sprintf("%v", s.Participants))
	builder.WriteByte(')')
	return builder.String()
}

// Scenarios is a parsable slice of Scenario.
type Scenarios []*Scenario
