// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/package/ent/predicate"
	"ekko/package/ent/scenariocandidate"
	"ekko/package/ent/submissionattempt"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubmissionAttemptUpdate is the builder for updating SubmissionAttempt entities.
type SubmissionAttemptUpdate struct {
	config
	hooks     []Hook
	mutation  *SubmissionAttemptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubmissionAttemptUpdate builder.
func (sau *SubmissionAttemptUpdate) Where(ps ...predicate.SubmissionAttempt) *SubmissionAttemptUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SubmissionAttemptUpdate) SetUpdatedAt(t time.Time) *SubmissionAttemptUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// SetScenarioCandidateID sets the "scenario_candidate_id" field.
func (sau *SubmissionAttemptUpdate) SetScenarioCandidateID(u uint64) *SubmissionAttemptUpdate {
	sau.mutation.SetScenarioCandidateID(u)
	return sau
}

// SetNillableScenarioCandidateID sets the "scenario_candidate_id" field if the given value is not nil.
func (sau *SubmissionAttemptUpdate) SetNillableScenarioCandidateID(u *uint64) *SubmissionAttemptUpdate {
	if u != nil {
		sau.SetScenarioCandidateID(*u)
	}
	return sau
}

// SetAttemptNumber sets the "attempt_number" field.
func (sau *SubmissionAttemptUpdate) SetAttemptNumber(i int32) *SubmissionAttemptUpdate {
	sau.mutation.ResetAttemptNumber()
	sau.mutation.SetAttemptNumber(i)
	return sau
}

// SetNillableAttemptNumber sets the "attempt_number" field if the given value is not nil.
func (sau *SubmissionAttemptUpdate) SetNillableAttemptNumber(i *int32) *SubmissionAttemptUpdate {
	if i != nil {
		sau.SetAttemptNumber(*i)
	}
	return sau
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (sau *SubmissionAttemptUpdate) AddAttemptNumber(i int32) *SubmissionAttemptUpdate {
	sau.mutation.AddAttemptNumber(i)
	return sau
}

// SetScenarioCandidate sets the "scenario_candidate" edge to the ScenarioCandidate entity.
func (sau *SubmissionAttemptUpdate) SetScenarioCandidate(s *ScenarioCandidate) *SubmissionAttemptUpdate {
	return sau.SetScenarioCandidateID(s.ID)
}

// Mutation returns the SubmissionAttemptMutation object of the builder.
func (sau *SubmissionAttemptUpdate) Mutation() *SubmissionAttemptMutation {
	return sau.mutation
}

// ClearScenarioCandidate clears the "scenario_candidate" edge to the ScenarioCandidate entity.
func (sau *SubmissionAttemptUpdate) ClearScenarioCandidate() *SubmissionAttemptUpdate {
	sau.mutation.ClearScenarioCandidate()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SubmissionAttemptUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SubmissionAttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SubmissionAttemptUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SubmissionAttemptUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SubmissionAttemptUpdate) defaults() {
	if _, ok := sau.mutation.UpdatedAt(); !ok {
		v := submissionattempt.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SubmissionAttemptUpdate) check() error {
	if sau.mutation.ScenarioCandidateCleared() && len(sau.mutation.ScenarioCandidateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubmissionAttempt.scenario_candidate"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sau *SubmissionAttemptUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubmissionAttemptUpdate {
	sau.modifiers = append(sau.modifiers, modifiers...)
	return sau
}

func (sau *SubmissionAttemptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissionattempt.Table, submissionattempt.Columns, sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(submissionattempt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sau.mutation.AttemptNumber(); ok {
		_spec.SetField(submissionattempt.FieldAttemptNumber, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedAttemptNumber(); ok {
		_spec.AddField(submissionattempt.FieldAttemptNumber, field.TypeInt32, value)
	}
	if sau.mutation.ScenarioCandidateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionattempt.ScenarioCandidateTable,
			Columns: []string{submissionattempt.ScenarioCandidateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ScenarioCandidateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionattempt.ScenarioCandidateTable,
			Columns: []string{submissionattempt.ScenarioCandidateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissionattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SubmissionAttemptUpdateOne is the builder for updating a single SubmissionAttempt entity.
type SubmissionAttemptUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubmissionAttemptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SubmissionAttemptUpdateOne) SetUpdatedAt(t time.Time) *SubmissionAttemptUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// SetScenarioCandidateID sets the "scenario_candidate_id" field.
func (sauo *SubmissionAttemptUpdateOne) SetScenarioCandidateID(u uint64) *SubmissionAttemptUpdateOne {
	sauo.mutation.SetScenarioCandidateID(u)
	return sauo
}

// SetNillableScenarioCandidateID sets the "scenario_candidate_id" field if the given value is not nil.
func (sauo *SubmissionAttemptUpdateOne) SetNillableScenarioCandidateID(u *uint64) *SubmissionAttemptUpdateOne {
	if u != nil {
		sauo.SetScenarioCandidateID(*u)
	}
	return sauo
}

// SetAttemptNumber sets the "attempt_number" field.
func (sauo *SubmissionAttemptUpdateOne) SetAttemptNumber(i int32) *SubmissionAttemptUpdateOne {
	sauo.mutation.ResetAttemptNumber()
	sauo.mutation.SetAttemptNumber(i)
	return sauo
}

// SetNillableAttemptNumber sets the "attempt_number" field if the given value is not nil.
func (sauo *SubmissionAttemptUpdateOne) SetNillableAttemptNumber(i *int32) *SubmissionAttemptUpdateOne {
	if i != nil {
		sauo.SetAttemptNumber(*i)
	}
	return sauo
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (sauo *SubmissionAttemptUpdateOne) AddAttemptNumber(i int32) *SubmissionAttemptUpdateOne {
	sauo.mutation.AddAttemptNumber(i)
	return sauo
}

// SetScenarioCandidate sets the "scenario_candidate" edge to the ScenarioCandidate entity.
func (sauo *SubmissionAttemptUpdateOne) SetScenarioCandidate(s *ScenarioCandidate) *SubmissionAttemptUpdateOne {
	return sauo.SetScenarioCandidateID(s.ID)
}

// Mutation returns the SubmissionAttemptMutation object of the builder.
func (sauo *SubmissionAttemptUpdateOne) Mutation() *SubmissionAttemptMutation {
	return sauo.mutation
}

// ClearScenarioCandidate clears the "scenario_candidate" edge to the ScenarioCandidate entity.
func (sauo *SubmissionAttemptUpdateOne) ClearScenarioCandidate() *SubmissionAttemptUpdateOne {
	sauo.mutation.ClearScenarioCandidate()
	return sauo
}

// Where appends a list predicates to the SubmissionAttemptUpdate builder.
func (sauo *SubmissionAttemptUpdateOne) Where(ps ...predicate.SubmissionAttempt) *SubmissionAttemptUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SubmissionAttemptUpdateOne) Select(field string, fields ...string) *SubmissionAttemptUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SubmissionAttempt entity.
func (sauo *SubmissionAttemptUpdateOne) Save(ctx context.Context) (*SubmissionAttempt, error) {
	sauo.defaults()
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SubmissionAttemptUpdateOne) SaveX(ctx context.Context) *SubmissionAttempt {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SubmissionAttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SubmissionAttemptUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SubmissionAttemptUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdatedAt(); !ok {
		v := submissionattempt.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SubmissionAttemptUpdateOne) check() error {
	if sauo.mutation.ScenarioCandidateCleared() && len(sauo.mutation.ScenarioCandidateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubmissionAttempt.scenario_candidate"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sauo *SubmissionAttemptUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubmissionAttemptUpdateOne {
	sauo.modifiers = append(sauo.modifiers, modifiers...)
	return sauo
}

func (sauo *SubmissionAttemptUpdateOne) sqlSave(ctx context.Context) (_node *SubmissionAttempt, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submissionattempt.Table, submissionattempt.Columns, sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubmissionAttempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submissionattempt.FieldID)
		for _, f := range fields {
			if !submissionattempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submissionattempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(submissionattempt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sauo.mutation.AttemptNumber(); ok {
		_spec.SetField(submissionattempt.FieldAttemptNumber, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedAttemptNumber(); ok {
		_spec.AddField(submissionattempt.FieldAttemptNumber, field.TypeInt32, value)
	}
	if sauo.mutation.ScenarioCandidateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionattempt.ScenarioCandidateTable,
			Columns: []string{submissionattempt.ScenarioCandidateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ScenarioCandidateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submissionattempt.ScenarioCandidateTable,
			Columns: []string{submissionattempt.ScenarioCandidateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sauo.modifiers...)
	_node = &SubmissionAttempt{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submissionattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
