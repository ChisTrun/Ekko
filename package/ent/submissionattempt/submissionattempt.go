// Code generated by ent, DO NOT EDIT.

package submissionattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submissionattempt type in the database.
	Label = "submission_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldScenarioCandidateID holds the string denoting the scenario_candidate_id field in the database.
	FieldScenarioCandidateID = "scenario_candidate_id"
	// FieldAttemptNumber holds the string denoting the attempt_number field in the database.
	FieldAttemptNumber = "attempt_number"
	// EdgeScenarioCandidate holds the string denoting the scenario_candidate edge name in mutations.
	EdgeScenarioCandidate = "scenario_candidate"
	// EdgeAnswers holds the string denoting the answers edge name in mutations.
	EdgeAnswers = "answers"
	// Table holds the table name of the submissionattempt in the database.
	Table = "submission_attempts"
	// ScenarioCandidateTable is the table that holds the scenario_candidate relation/edge.
	ScenarioCandidateTable = "submission_attempts"
	// ScenarioCandidateInverseTable is the table name for the ScenarioCandidate entity.
	// It exists in this package in order to avoid circular dependency with the "scenariocandidate" package.
	ScenarioCandidateInverseTable = "scenario_candidates"
	// ScenarioCandidateColumn is the table column denoting the scenario_candidate relation/edge.
	ScenarioCandidateColumn = "scenario_candidate_id"
	// AnswersTable is the table that holds the answers relation/edge.
	AnswersTable = "answer_submissions"
	// AnswersInverseTable is the table name for the AnswerSubmission entity.
	// It exists in this package in order to avoid circular dependency with the "answersubmission" package.
	AnswersInverseTable = "answer_submissions"
	// AnswersColumn is the table column denoting the answers relation/edge.
	AnswersColumn = "submission_attempt_id"
)

// Columns holds all SQL columns for submissionattempt fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldScenarioCandidateID,
	FieldAttemptNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SubmissionAttempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByScenarioCandidateID orders the results by the scenario_candidate_id field.
func ByScenarioCandidateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenarioCandidateID, opts...).ToFunc()
}

// ByAttemptNumber orders the results by the attempt_number field.
func ByAttemptNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptNumber, opts...).ToFunc()
}

// ByScenarioCandidateField orders the results by scenario_candidate field.
func ByScenarioCandidateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScenarioCandidateStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswersCount orders the results by answers count.
func ByAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswersStep(), opts...)
	}
}

// ByAnswers orders the results by answers terms.
func ByAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newScenarioCandidateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScenarioCandidateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScenarioCandidateTable, ScenarioCandidateColumn),
	)
}
func newAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswersTable, AnswersColumn),
	)
}
