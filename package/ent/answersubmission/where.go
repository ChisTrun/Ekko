// Code generated by ent, DO NOT EDIT.

package answersubmission

import (
	ekko "ekko/api"
	"ekko/package/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldUpdatedAt, v))
}

// SubmissionAttemptID applies equality check predicate on the "submission_attempt_id" field. It's identical to SubmissionAttemptIDEQ.
func SubmissionAttemptID(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldSubmissionAttemptID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldQuestionID, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldAnswer, v))
}

// Relevance applies equality check predicate on the "relevance" field. It's identical to RelevanceEQ.
func Relevance(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldRelevance, v))
}

// ClarityCompleteness applies equality check predicate on the "clarity_completeness" field. It's identical to ClarityCompletenessEQ.
func ClarityCompleteness(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldClarityCompleteness, v))
}

// Accuracy applies equality check predicate on the "accuracy" field. It's identical to AccuracyEQ.
func Accuracy(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldAccuracy, v))
}

// Overall applies equality check predicate on the "overall" field. It's identical to OverallEQ.
func Overall(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldOverall, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldEQ(FieldStatus, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldUpdatedAt, v))
}

// SubmissionAttemptIDEQ applies the EQ predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDEQ(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldSubmissionAttemptID, v))
}

// SubmissionAttemptIDNEQ applies the NEQ predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDNEQ(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldSubmissionAttemptID, v))
}

// SubmissionAttemptIDIn applies the In predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDIn(vs ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldSubmissionAttemptID, vs...))
}

// SubmissionAttemptIDNotIn applies the NotIn predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDNotIn(vs ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldSubmissionAttemptID, vs...))
}

// SubmissionAttemptIDGT applies the GT predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDGT(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldSubmissionAttemptID, v))
}

// SubmissionAttemptIDGTE applies the GTE predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDGTE(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldSubmissionAttemptID, v))
}

// SubmissionAttemptIDLT applies the LT predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDLT(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldSubmissionAttemptID, v))
}

// SubmissionAttemptIDLTE applies the LTE predicate on the "submission_attempt_id" field.
func SubmissionAttemptIDLTE(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldSubmissionAttemptID, v))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldQuestionID, vs...))
}

// QuestionIDGT applies the GT predicate on the "question_id" field.
func QuestionIDGT(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldQuestionID, v))
}

// QuestionIDGTE applies the GTE predicate on the "question_id" field.
func QuestionIDGTE(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldQuestionID, v))
}

// QuestionIDLT applies the LT predicate on the "question_id" field.
func QuestionIDLT(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldQuestionID, v))
}

// QuestionIDLTE applies the LTE predicate on the "question_id" field.
func QuestionIDLTE(v uint64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldQuestionID, v))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldContainsFold(FieldAnswer, v))
}

// RelevanceEQ applies the EQ predicate on the "relevance" field.
func RelevanceEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldRelevance, v))
}

// RelevanceNEQ applies the NEQ predicate on the "relevance" field.
func RelevanceNEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldRelevance, v))
}

// RelevanceIn applies the In predicate on the "relevance" field.
func RelevanceIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldRelevance, vs...))
}

// RelevanceNotIn applies the NotIn predicate on the "relevance" field.
func RelevanceNotIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldRelevance, vs...))
}

// RelevanceGT applies the GT predicate on the "relevance" field.
func RelevanceGT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldRelevance, v))
}

// RelevanceGTE applies the GTE predicate on the "relevance" field.
func RelevanceGTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldRelevance, v))
}

// RelevanceLT applies the LT predicate on the "relevance" field.
func RelevanceLT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldRelevance, v))
}

// RelevanceLTE applies the LTE predicate on the "relevance" field.
func RelevanceLTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldRelevance, v))
}

// ClarityCompletenessEQ applies the EQ predicate on the "clarity_completeness" field.
func ClarityCompletenessEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldClarityCompleteness, v))
}

// ClarityCompletenessNEQ applies the NEQ predicate on the "clarity_completeness" field.
func ClarityCompletenessNEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldClarityCompleteness, v))
}

// ClarityCompletenessIn applies the In predicate on the "clarity_completeness" field.
func ClarityCompletenessIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldClarityCompleteness, vs...))
}

// ClarityCompletenessNotIn applies the NotIn predicate on the "clarity_completeness" field.
func ClarityCompletenessNotIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldClarityCompleteness, vs...))
}

// ClarityCompletenessGT applies the GT predicate on the "clarity_completeness" field.
func ClarityCompletenessGT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldClarityCompleteness, v))
}

// ClarityCompletenessGTE applies the GTE predicate on the "clarity_completeness" field.
func ClarityCompletenessGTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldClarityCompleteness, v))
}

// ClarityCompletenessLT applies the LT predicate on the "clarity_completeness" field.
func ClarityCompletenessLT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldClarityCompleteness, v))
}

// ClarityCompletenessLTE applies the LTE predicate on the "clarity_completeness" field.
func ClarityCompletenessLTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldClarityCompleteness, v))
}

// AccuracyEQ applies the EQ predicate on the "accuracy" field.
func AccuracyEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldAccuracy, v))
}

// AccuracyNEQ applies the NEQ predicate on the "accuracy" field.
func AccuracyNEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldAccuracy, v))
}

// AccuracyIn applies the In predicate on the "accuracy" field.
func AccuracyIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldAccuracy, vs...))
}

// AccuracyNotIn applies the NotIn predicate on the "accuracy" field.
func AccuracyNotIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldAccuracy, vs...))
}

// AccuracyGT applies the GT predicate on the "accuracy" field.
func AccuracyGT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldAccuracy, v))
}

// AccuracyGTE applies the GTE predicate on the "accuracy" field.
func AccuracyGTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldAccuracy, v))
}

// AccuracyLT applies the LT predicate on the "accuracy" field.
func AccuracyLT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldAccuracy, v))
}

// AccuracyLTE applies the LTE predicate on the "accuracy" field.
func AccuracyLTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldAccuracy, v))
}

// OverallEQ applies the EQ predicate on the "overall" field.
func OverallEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldEQ(FieldOverall, v))
}

// OverallNEQ applies the NEQ predicate on the "overall" field.
func OverallNEQ(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldOverall, v))
}

// OverallIn applies the In predicate on the "overall" field.
func OverallIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldIn(FieldOverall, vs...))
}

// OverallNotIn applies the NotIn predicate on the "overall" field.
func OverallNotIn(vs ...float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldOverall, vs...))
}

// OverallGT applies the GT predicate on the "overall" field.
func OverallGT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGT(FieldOverall, v))
}

// OverallGTE applies the GTE predicate on the "overall" field.
func OverallGTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldGTE(FieldOverall, v))
}

// OverallLT applies the LT predicate on the "overall" field.
func OverallLT(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLT(FieldOverall, v))
}

// OverallLTE applies the LTE predicate on the "overall" field.
func OverallLTE(v float64) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.FieldLTE(FieldOverall, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...ekko.SubmissionStatus) predicate.AnswerSubmission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.AnswerSubmission(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...ekko.SubmissionStatus) predicate.AnswerSubmission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.AnswerSubmission(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v ekko.SubmissionStatus) predicate.AnswerSubmission {
	vc := int32(v)
	return predicate.AnswerSubmission(sql.FieldLTE(FieldStatus, vc))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnswerSubmission) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnswerSubmission) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnswerSubmission) predicate.AnswerSubmission {
	return predicate.AnswerSubmission(sql.NotPredicates(p))
}
