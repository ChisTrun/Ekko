// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/package/ent/scenario"
	"ekko/package/ent/scenariofavorite"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioFavoriteCreate is the builder for creating a ScenarioFavorite entity.
type ScenarioFavoriteCreate struct {
	config
	mutation *ScenarioFavoriteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sfc *ScenarioFavoriteCreate) SetCreatedAt(t time.Time) *ScenarioFavoriteCreate {
	sfc.mutation.SetCreatedAt(t)
	return sfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sfc *ScenarioFavoriteCreate) SetNillableCreatedAt(t *time.Time) *ScenarioFavoriteCreate {
	if t != nil {
		sfc.SetCreatedAt(*t)
	}
	return sfc
}

// SetUpdatedAt sets the "updated_at" field.
func (sfc *ScenarioFavoriteCreate) SetUpdatedAt(t time.Time) *ScenarioFavoriteCreate {
	sfc.mutation.SetUpdatedAt(t)
	return sfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sfc *ScenarioFavoriteCreate) SetNillableUpdatedAt(t *time.Time) *ScenarioFavoriteCreate {
	if t != nil {
		sfc.SetUpdatedAt(*t)
	}
	return sfc
}

// SetUserID sets the "user_id" field.
func (sfc *ScenarioFavoriteCreate) SetUserID(u uint64) *ScenarioFavoriteCreate {
	sfc.mutation.SetUserID(u)
	return sfc
}

// SetScenarioID sets the "scenario_id" field.
func (sfc *ScenarioFavoriteCreate) SetScenarioID(u uint64) *ScenarioFavoriteCreate {
	sfc.mutation.SetScenarioID(u)
	return sfc
}

// SetID sets the "id" field.
func (sfc *ScenarioFavoriteCreate) SetID(u uint64) *ScenarioFavoriteCreate {
	sfc.mutation.SetID(u)
	return sfc
}

// SetSenarioID sets the "senario" edge to the Scenario entity by ID.
func (sfc *ScenarioFavoriteCreate) SetSenarioID(id uint64) *ScenarioFavoriteCreate {
	sfc.mutation.SetSenarioID(id)
	return sfc
}

// SetSenario sets the "senario" edge to the Scenario entity.
func (sfc *ScenarioFavoriteCreate) SetSenario(s *Scenario) *ScenarioFavoriteCreate {
	return sfc.SetSenarioID(s.ID)
}

// Mutation returns the ScenarioFavoriteMutation object of the builder.
func (sfc *ScenarioFavoriteCreate) Mutation() *ScenarioFavoriteMutation {
	return sfc.mutation
}

// Save creates the ScenarioFavorite in the database.
func (sfc *ScenarioFavoriteCreate) Save(ctx context.Context) (*ScenarioFavorite, error) {
	sfc.defaults()
	return withHooks(ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *ScenarioFavoriteCreate) SaveX(ctx context.Context) *ScenarioFavorite {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *ScenarioFavoriteCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *ScenarioFavoriteCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfc *ScenarioFavoriteCreate) defaults() {
	if _, ok := sfc.mutation.CreatedAt(); !ok {
		v := scenariofavorite.DefaultCreatedAt()
		sfc.mutation.SetCreatedAt(v)
	}
	if _, ok := sfc.mutation.UpdatedAt(); !ok {
		v := scenariofavorite.DefaultUpdatedAt()
		sfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *ScenarioFavoriteCreate) check() error {
	if _, ok := sfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScenarioFavorite.created_at"`)}
	}
	if _, ok := sfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScenarioFavorite.updated_at"`)}
	}
	if _, ok := sfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScenarioFavorite.user_id"`)}
	}
	if _, ok := sfc.mutation.ScenarioID(); !ok {
		return &ValidationError{Name: "scenario_id", err: errors.New(`ent: missing required field "ScenarioFavorite.scenario_id"`)}
	}
	if len(sfc.mutation.SenarioIDs()) == 0 {
		return &ValidationError{Name: "senario", err: errors.New(`ent: missing required edge "ScenarioFavorite.senario"`)}
	}
	return nil
}

func (sfc *ScenarioFavoriteCreate) sqlSave(ctx context.Context) (*ScenarioFavorite, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *ScenarioFavoriteCreate) createSpec() (*ScenarioFavorite, *sqlgraph.CreateSpec) {
	var (
		_node = &ScenarioFavorite{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(scenariofavorite.Table, sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = sfc.conflict
	if id, ok := sfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sfc.mutation.CreatedAt(); ok {
		_spec.SetField(scenariofavorite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sfc.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariofavorite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sfc.mutation.UserID(); ok {
		_spec.SetField(scenariofavorite.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if nodes := sfc.mutation.SenarioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariofavorite.SenarioTable,
			Columns: []string{scenariofavorite.SenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenarioID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScenarioFavorite.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioFavoriteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sfc *ScenarioFavoriteCreate) OnConflict(opts ...sql.ConflictOption) *ScenarioFavoriteUpsertOne {
	sfc.conflict = opts
	return &ScenarioFavoriteUpsertOne{
		create: sfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sfc *ScenarioFavoriteCreate) OnConflictColumns(columns ...string) *ScenarioFavoriteUpsertOne {
	sfc.conflict = append(sfc.conflict, sql.ConflictColumns(columns...))
	return &ScenarioFavoriteUpsertOne{
		create: sfc,
	}
}

type (
	// ScenarioFavoriteUpsertOne is the builder for "upsert"-ing
	//  one ScenarioFavorite node.
	ScenarioFavoriteUpsertOne struct {
		create *ScenarioFavoriteCreate
	}

	// ScenarioFavoriteUpsert is the "OnConflict" setter.
	ScenarioFavoriteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioFavoriteUpsert) SetUpdatedAt(v time.Time) *ScenarioFavoriteUpsert {
	u.Set(scenariofavorite.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsert) UpdateUpdatedAt() *ScenarioFavoriteUpsert {
	u.SetExcluded(scenariofavorite.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ScenarioFavoriteUpsert) SetUserID(v uint64) *ScenarioFavoriteUpsert {
	u.Set(scenariofavorite.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsert) UpdateUserID() *ScenarioFavoriteUpsert {
	u.SetExcluded(scenariofavorite.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *ScenarioFavoriteUpsert) AddUserID(v uint64) *ScenarioFavoriteUpsert {
	u.Add(scenariofavorite.FieldUserID, v)
	return u
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioFavoriteUpsert) SetScenarioID(v uint64) *ScenarioFavoriteUpsert {
	u.Set(scenariofavorite.FieldScenarioID, v)
	return u
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsert) UpdateScenarioID() *ScenarioFavoriteUpsert {
	u.SetExcluded(scenariofavorite.FieldScenarioID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenariofavorite.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioFavoriteUpsertOne) UpdateNewValues() *ScenarioFavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scenariofavorite.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scenariofavorite.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScenarioFavoriteUpsertOne) Ignore() *ScenarioFavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioFavoriteUpsertOne) DoNothing() *ScenarioFavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioFavoriteCreate.OnConflict
// documentation for more info.
func (u *ScenarioFavoriteUpsertOne) Update(set func(*ScenarioFavoriteUpsert)) *ScenarioFavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioFavoriteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioFavoriteUpsertOne) SetUpdatedAt(v time.Time) *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertOne) UpdateUpdatedAt() *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScenarioFavoriteUpsertOne) SetUserID(v uint64) *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ScenarioFavoriteUpsertOne) AddUserID(v uint64) *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertOne) UpdateUserID() *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateUserID()
	})
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioFavoriteUpsertOne) SetScenarioID(v uint64) *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetScenarioID(v)
	})
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertOne) UpdateScenarioID() *ScenarioFavoriteUpsertOne {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateScenarioID()
	})
}

// Exec executes the query.
func (u *ScenarioFavoriteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioFavoriteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioFavoriteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScenarioFavoriteUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScenarioFavoriteUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScenarioFavoriteCreateBulk is the builder for creating many ScenarioFavorite entities in bulk.
type ScenarioFavoriteCreateBulk struct {
	config
	err      error
	builders []*ScenarioFavoriteCreate
	conflict []sql.ConflictOption
}

// Save creates the ScenarioFavorite entities in the database.
func (sfcb *ScenarioFavoriteCreateBulk) Save(ctx context.Context) ([]*ScenarioFavorite, error) {
	if sfcb.err != nil {
		return nil, sfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*ScenarioFavorite, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenarioFavoriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *ScenarioFavoriteCreateBulk) SaveX(ctx context.Context) []*ScenarioFavorite {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *ScenarioFavoriteCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *ScenarioFavoriteCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScenarioFavorite.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioFavoriteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sfcb *ScenarioFavoriteCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScenarioFavoriteUpsertBulk {
	sfcb.conflict = opts
	return &ScenarioFavoriteUpsertBulk{
		create: sfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sfcb *ScenarioFavoriteCreateBulk) OnConflictColumns(columns ...string) *ScenarioFavoriteUpsertBulk {
	sfcb.conflict = append(sfcb.conflict, sql.ConflictColumns(columns...))
	return &ScenarioFavoriteUpsertBulk{
		create: sfcb,
	}
}

// ScenarioFavoriteUpsertBulk is the builder for "upsert"-ing
// a bulk of ScenarioFavorite nodes.
type ScenarioFavoriteUpsertBulk struct {
	create *ScenarioFavoriteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenariofavorite.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioFavoriteUpsertBulk) UpdateNewValues() *ScenarioFavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scenariofavorite.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scenariofavorite.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScenarioFavorite.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScenarioFavoriteUpsertBulk) Ignore() *ScenarioFavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioFavoriteUpsertBulk) DoNothing() *ScenarioFavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioFavoriteCreateBulk.OnConflict
// documentation for more info.
func (u *ScenarioFavoriteUpsertBulk) Update(set func(*ScenarioFavoriteUpsert)) *ScenarioFavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioFavoriteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioFavoriteUpsertBulk) SetUpdatedAt(v time.Time) *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertBulk) UpdateUpdatedAt() *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScenarioFavoriteUpsertBulk) SetUserID(v uint64) *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ScenarioFavoriteUpsertBulk) AddUserID(v uint64) *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertBulk) UpdateUserID() *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateUserID()
	})
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioFavoriteUpsertBulk) SetScenarioID(v uint64) *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.SetScenarioID(v)
	})
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioFavoriteUpsertBulk) UpdateScenarioID() *ScenarioFavoriteUpsertBulk {
	return u.Update(func(s *ScenarioFavoriteUpsert) {
		s.UpdateScenarioID()
	})
}

// Exec executes the query.
func (u *ScenarioFavoriteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScenarioFavoriteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioFavoriteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioFavoriteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
