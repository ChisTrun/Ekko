// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/pkg/ent/predicate"
	"ekko/pkg/ent/scenario"
	"ekko/pkg/ent/scenariofavorite"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioFavoriteQuery is the builder for querying ScenarioFavorite entities.
type ScenarioFavoriteQuery struct {
	config
	ctx         *QueryContext
	order       []scenariofavorite.OrderOption
	inters      []Interceptor
	predicates  []predicate.ScenarioFavorite
	withSenario *ScenarioQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScenarioFavoriteQuery builder.
func (sfq *ScenarioFavoriteQuery) Where(ps ...predicate.ScenarioFavorite) *ScenarioFavoriteQuery {
	sfq.predicates = append(sfq.predicates, ps...)
	return sfq
}

// Limit the number of records to be returned by this query.
func (sfq *ScenarioFavoriteQuery) Limit(limit int) *ScenarioFavoriteQuery {
	sfq.ctx.Limit = &limit
	return sfq
}

// Offset to start from.
func (sfq *ScenarioFavoriteQuery) Offset(offset int) *ScenarioFavoriteQuery {
	sfq.ctx.Offset = &offset
	return sfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sfq *ScenarioFavoriteQuery) Unique(unique bool) *ScenarioFavoriteQuery {
	sfq.ctx.Unique = &unique
	return sfq
}

// Order specifies how the records should be ordered.
func (sfq *ScenarioFavoriteQuery) Order(o ...scenariofavorite.OrderOption) *ScenarioFavoriteQuery {
	sfq.order = append(sfq.order, o...)
	return sfq
}

// QuerySenario chains the current query on the "senario" edge.
func (sfq *ScenarioFavoriteQuery) QuerySenario() *ScenarioQuery {
	query := (&ScenarioClient{config: sfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scenariofavorite.Table, scenariofavorite.FieldID, selector),
			sqlgraph.To(scenario.Table, scenario.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scenariofavorite.SenarioTable, scenariofavorite.SenarioColumn),
		)
		fromU = sqlgraph.SetNeighbors(sfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScenarioFavorite entity from the query.
// Returns a *NotFoundError when no ScenarioFavorite was found.
func (sfq *ScenarioFavoriteQuery) First(ctx context.Context) (*ScenarioFavorite, error) {
	nodes, err := sfq.Limit(1).All(setContextOp(ctx, sfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scenariofavorite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) FirstX(ctx context.Context) *ScenarioFavorite {
	node, err := sfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScenarioFavorite ID from the query.
// Returns a *NotFoundError when no ScenarioFavorite ID was found.
func (sfq *ScenarioFavoriteQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sfq.Limit(1).IDs(setContextOp(ctx, sfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scenariofavorite.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScenarioFavorite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScenarioFavorite entity is found.
// Returns a *NotFoundError when no ScenarioFavorite entities are found.
func (sfq *ScenarioFavoriteQuery) Only(ctx context.Context) (*ScenarioFavorite, error) {
	nodes, err := sfq.Limit(2).All(setContextOp(ctx, sfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scenariofavorite.Label}
	default:
		return nil, &NotSingularError{scenariofavorite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) OnlyX(ctx context.Context) *ScenarioFavorite {
	node, err := sfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScenarioFavorite ID in the query.
// Returns a *NotSingularError when more than one ScenarioFavorite ID is found.
// Returns a *NotFoundError when no entities are found.
func (sfq *ScenarioFavoriteQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sfq.Limit(2).IDs(setContextOp(ctx, sfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scenariofavorite.Label}
	default:
		err = &NotSingularError{scenariofavorite.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScenarioFavorites.
func (sfq *ScenarioFavoriteQuery) All(ctx context.Context) ([]*ScenarioFavorite, error) {
	ctx = setContextOp(ctx, sfq.ctx, ent.OpQueryAll)
	if err := sfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScenarioFavorite, *ScenarioFavoriteQuery]()
	return withInterceptors[[]*ScenarioFavorite](ctx, sfq, qr, sfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) AllX(ctx context.Context) []*ScenarioFavorite {
	nodes, err := sfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScenarioFavorite IDs.
func (sfq *ScenarioFavoriteQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if sfq.ctx.Unique == nil && sfq.path != nil {
		sfq.Unique(true)
	}
	ctx = setContextOp(ctx, sfq.ctx, ent.OpQueryIDs)
	if err = sfq.Select(scenariofavorite.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sfq *ScenarioFavoriteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sfq.ctx, ent.OpQueryCount)
	if err := sfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sfq, querierCount[*ScenarioFavoriteQuery](), sfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) CountX(ctx context.Context) int {
	count, err := sfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sfq *ScenarioFavoriteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sfq.ctx, ent.OpQueryExist)
	switch _, err := sfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sfq *ScenarioFavoriteQuery) ExistX(ctx context.Context) bool {
	exist, err := sfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScenarioFavoriteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sfq *ScenarioFavoriteQuery) Clone() *ScenarioFavoriteQuery {
	if sfq == nil {
		return nil
	}
	return &ScenarioFavoriteQuery{
		config:      sfq.config,
		ctx:         sfq.ctx.Clone(),
		order:       append([]scenariofavorite.OrderOption{}, sfq.order...),
		inters:      append([]Interceptor{}, sfq.inters...),
		predicates:  append([]predicate.ScenarioFavorite{}, sfq.predicates...),
		withSenario: sfq.withSenario.Clone(),
		// clone intermediate query.
		sql:  sfq.sql.Clone(),
		path: sfq.path,
	}
}

// WithSenario tells the query-builder to eager-load the nodes that are connected to
// the "senario" edge. The optional arguments are used to configure the query builder of the edge.
func (sfq *ScenarioFavoriteQuery) WithSenario(opts ...func(*ScenarioQuery)) *ScenarioFavoriteQuery {
	query := (&ScenarioClient{config: sfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sfq.withSenario = query
	return sfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScenarioFavorite.Query().
//		GroupBy(scenariofavorite.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sfq *ScenarioFavoriteQuery) GroupBy(field string, fields ...string) *ScenarioFavoriteGroupBy {
	sfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScenarioFavoriteGroupBy{build: sfq}
	grbuild.flds = &sfq.ctx.Fields
	grbuild.label = scenariofavorite.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ScenarioFavorite.Query().
//		Select(scenariofavorite.FieldCreatedAt).
//		Scan(ctx, &v)
func (sfq *ScenarioFavoriteQuery) Select(fields ...string) *ScenarioFavoriteSelect {
	sfq.ctx.Fields = append(sfq.ctx.Fields, fields...)
	sbuild := &ScenarioFavoriteSelect{ScenarioFavoriteQuery: sfq}
	sbuild.label = scenariofavorite.Label
	sbuild.flds, sbuild.scan = &sfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScenarioFavoriteSelect configured with the given aggregations.
func (sfq *ScenarioFavoriteQuery) Aggregate(fns ...AggregateFunc) *ScenarioFavoriteSelect {
	return sfq.Select().Aggregate(fns...)
}

func (sfq *ScenarioFavoriteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sfq); err != nil {
				return err
			}
		}
	}
	for _, f := range sfq.ctx.Fields {
		if !scenariofavorite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sfq.path != nil {
		prev, err := sfq.path(ctx)
		if err != nil {
			return err
		}
		sfq.sql = prev
	}
	return nil
}

func (sfq *ScenarioFavoriteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScenarioFavorite, error) {
	var (
		nodes       = []*ScenarioFavorite{}
		_spec       = sfq.querySpec()
		loadedTypes = [1]bool{
			sfq.withSenario != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScenarioFavorite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScenarioFavorite{config: sfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sfq.modifiers) > 0 {
		_spec.Modifiers = sfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sfq.withSenario; query != nil {
		if err := sfq.loadSenario(ctx, query, nodes, nil,
			func(n *ScenarioFavorite, e *Scenario) { n.Edges.Senario = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sfq *ScenarioFavoriteQuery) loadSenario(ctx context.Context, query *ScenarioQuery, nodes []*ScenarioFavorite, init func(*ScenarioFavorite), assign func(*ScenarioFavorite, *Scenario)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ScenarioFavorite)
	for i := range nodes {
		fk := nodes[i].ScenarioID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(scenario.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scenario_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sfq *ScenarioFavoriteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sfq.querySpec()
	if len(sfq.modifiers) > 0 {
		_spec.Modifiers = sfq.modifiers
	}
	_spec.Node.Columns = sfq.ctx.Fields
	if len(sfq.ctx.Fields) > 0 {
		_spec.Unique = sfq.ctx.Unique != nil && *sfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sfq.driver, _spec)
}

func (sfq *ScenarioFavoriteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(scenariofavorite.Table, scenariofavorite.Columns, sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64))
	_spec.From = sfq.sql
	if unique := sfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sfq.path != nil {
		_spec.Unique = true
	}
	if fields := sfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenariofavorite.FieldID)
		for i := range fields {
			if fields[i] != scenariofavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sfq.withSenario != nil {
			_spec.Node.AddColumnOnce(scenariofavorite.FieldScenarioID)
		}
	}
	if ps := sfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sfq *ScenarioFavoriteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sfq.driver.Dialect())
	t1 := builder.Table(scenariofavorite.Table)
	columns := sfq.ctx.Fields
	if len(columns) == 0 {
		columns = scenariofavorite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sfq.sql != nil {
		selector = sfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sfq.ctx.Unique != nil && *sfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sfq.modifiers {
		m(selector)
	}
	for _, p := range sfq.predicates {
		p(selector)
	}
	for _, p := range sfq.order {
		p(selector)
	}
	if offset := sfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (sfq *ScenarioFavoriteQuery) ForUpdate(opts ...sql.LockOption) *ScenarioFavoriteQuery {
	if sfq.driver.Dialect() == dialect.Postgres {
		sfq.Unique(false)
	}
	sfq.modifiers = append(sfq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return sfq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (sfq *ScenarioFavoriteQuery) ForShare(opts ...sql.LockOption) *ScenarioFavoriteQuery {
	if sfq.driver.Dialect() == dialect.Postgres {
		sfq.Unique(false)
	}
	sfq.modifiers = append(sfq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return sfq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sfq *ScenarioFavoriteQuery) Modify(modifiers ...func(s *sql.Selector)) *ScenarioFavoriteSelect {
	sfq.modifiers = append(sfq.modifiers, modifiers...)
	return sfq.Select()
}

// ScenarioFavoriteGroupBy is the group-by builder for ScenarioFavorite entities.
type ScenarioFavoriteGroupBy struct {
	selector
	build *ScenarioFavoriteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sfgb *ScenarioFavoriteGroupBy) Aggregate(fns ...AggregateFunc) *ScenarioFavoriteGroupBy {
	sfgb.fns = append(sfgb.fns, fns...)
	return sfgb
}

// Scan applies the selector query and scans the result into the given value.
func (sfgb *ScenarioFavoriteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sfgb.build.ctx, ent.OpQueryGroupBy)
	if err := sfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScenarioFavoriteQuery, *ScenarioFavoriteGroupBy](ctx, sfgb.build, sfgb, sfgb.build.inters, v)
}

func (sfgb *ScenarioFavoriteGroupBy) sqlScan(ctx context.Context, root *ScenarioFavoriteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sfgb.fns))
	for _, fn := range sfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sfgb.flds)+len(sfgb.fns))
		for _, f := range *sfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScenarioFavoriteSelect is the builder for selecting fields of ScenarioFavorite entities.
type ScenarioFavoriteSelect struct {
	*ScenarioFavoriteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sfs *ScenarioFavoriteSelect) Aggregate(fns ...AggregateFunc) *ScenarioFavoriteSelect {
	sfs.fns = append(sfs.fns, fns...)
	return sfs
}

// Scan applies the selector query and scans the result into the given value.
func (sfs *ScenarioFavoriteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sfs.ctx, ent.OpQuerySelect)
	if err := sfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScenarioFavoriteQuery, *ScenarioFavoriteSelect](ctx, sfs.ScenarioFavoriteQuery, sfs, sfs.inters, v)
}

func (sfs *ScenarioFavoriteSelect) sqlScan(ctx context.Context, root *ScenarioFavoriteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sfs.fns))
	for _, fn := range sfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sfs *ScenarioFavoriteSelect) Modify(modifiers ...func(s *sql.Selector)) *ScenarioFavoriteSelect {
	sfs.modifiers = append(sfs.modifiers, modifiers...)
	return sfs
}
