// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ekko/pkg/ent/scenariofield"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScenarioField is the model entity for the ScenarioField schema.
type ScenarioField struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenarioFieldQuery when eager-loading is set.
	Edges        ScenarioFieldEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenarioFieldEdges holds the relations/edges for other nodes in the graph.
type ScenarioFieldEdges struct {
	// Senarios holds the value of the senarios edge.
	Senarios []*Scenario `json:"senarios,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SenariosOrErr returns the Senarios value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioFieldEdges) SenariosOrErr() ([]*Scenario, error) {
	if e.loadedTypes[0] {
		return e.Senarios, nil
	}
	return nil, &NotLoadedError{edge: "senarios"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScenarioField) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenariofield.FieldID:
			values[i] = new(sql.NullInt64)
		case scenariofield.FieldName:
			values[i] = new(sql.NullString)
		case scenariofield.FieldCreatedAt, scenariofield.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScenarioField fields.
func (sf *ScenarioField) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenariofield.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = uint64(value.Int64)
		case scenariofield.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sf.CreatedAt = value.Time
			}
		case scenariofield.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sf.UpdatedAt = value.Time
			}
		case scenariofield.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sf.Name = value.String
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScenarioField.
// This includes values selected through modifiers, order, etc.
func (sf *ScenarioField) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// QuerySenarios queries the "senarios" edge of the ScenarioField entity.
func (sf *ScenarioField) QuerySenarios() *ScenarioQuery {
	return NewScenarioFieldClient(sf.config).QuerySenarios(sf)
}

// Update returns a builder for updating this ScenarioField.
// Note that you need to call ScenarioField.Unwrap() before calling this method if this ScenarioField
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *ScenarioField) Update() *ScenarioFieldUpdateOne {
	return NewScenarioFieldClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the ScenarioField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *ScenarioField) Unwrap() *ScenarioField {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScenarioField is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *ScenarioField) String() string {
	var builder strings.Builder
	builder.WriteString("ScenarioField(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sf.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ScenarioFields is a parsable slice of ScenarioField.
type ScenarioFields []*ScenarioField
