// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ekko/pkg/ent/scenario"
	"ekko/pkg/ent/scenariofavorite"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ScenarioFavorite is the model entity for the ScenarioFavorite schema.
type ScenarioFavorite struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// ScenarioID holds the value of the "scenario_id" field.
	ScenarioID uint64 `json:"scenario_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenarioFavoriteQuery when eager-loading is set.
	Edges        ScenarioFavoriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenarioFavoriteEdges holds the relations/edges for other nodes in the graph.
type ScenarioFavoriteEdges struct {
	// Senario holds the value of the senario edge.
	Senario *Scenario `json:"senario,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SenarioOrErr returns the Senario value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScenarioFavoriteEdges) SenarioOrErr() (*Scenario, error) {
	if e.Senario != nil {
		return e.Senario, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenario.Label}
	}
	return nil, &NotLoadedError{edge: "senario"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScenarioFavorite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenariofavorite.FieldID, scenariofavorite.FieldUserID, scenariofavorite.FieldScenarioID:
			values[i] = new(sql.NullInt64)
		case scenariofavorite.FieldCreatedAt, scenariofavorite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScenarioFavorite fields.
func (sf *ScenarioFavorite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenariofavorite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = uint64(value.Int64)
		case scenariofavorite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sf.CreatedAt = value.Time
			}
		case scenariofavorite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sf.UpdatedAt = value.Time
			}
		case scenariofavorite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sf.UserID = uint64(value.Int64)
			}
		case scenariofavorite.FieldScenarioID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenario_id", values[i])
			} else if value.Valid {
				sf.ScenarioID = uint64(value.Int64)
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScenarioFavorite.
// This includes values selected through modifiers, order, etc.
func (sf *ScenarioFavorite) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// QuerySenario queries the "senario" edge of the ScenarioFavorite entity.
func (sf *ScenarioFavorite) QuerySenario() *ScenarioQuery {
	return NewScenarioFavoriteClient(sf.config).QuerySenario(sf)
}

// Update returns a builder for updating this ScenarioFavorite.
// Note that you need to call ScenarioFavorite.Unwrap() before calling this method if this ScenarioFavorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *ScenarioFavorite) Update() *ScenarioFavoriteUpdateOne {
	return NewScenarioFavoriteClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the ScenarioFavorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *ScenarioFavorite) Unwrap() *ScenarioFavorite {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScenarioFavorite is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *ScenarioFavorite) String() string {
	var builder strings.Builder
	builder.WriteString("ScenarioFavorite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sf.UserID))
	builder.WriteString(", ")
	builder.WriteString("scenario_id=")
	builder.WriteString(fmt.Sprintf("%v", sf.ScenarioID))
	builder.WriteByte(')')
	return builder.String()
}

// ScenarioFavorites is a parsable slice of ScenarioFavorite.
type ScenarioFavorites []*ScenarioFavorite
