// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	ekko "ekko/api"
	"ekko/pkg/ent/answersubmission"
	"ekko/pkg/ent/predicate"
	"ekko/pkg/ent/question"
	"ekko/pkg/ent/submissionattempt"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerSubmissionUpdate is the builder for updating AnswerSubmission entities.
type AnswerSubmissionUpdate struct {
	config
	hooks     []Hook
	mutation  *AnswerSubmissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AnswerSubmissionUpdate builder.
func (asu *AnswerSubmissionUpdate) Where(ps ...predicate.AnswerSubmission) *AnswerSubmissionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AnswerSubmissionUpdate) SetUpdatedAt(t time.Time) *AnswerSubmissionUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (asu *AnswerSubmissionUpdate) SetSubmissionAttemptID(u uint64) *AnswerSubmissionUpdate {
	asu.mutation.SetSubmissionAttemptID(u)
	return asu
}

// SetNillableSubmissionAttemptID sets the "submission_attempt_id" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableSubmissionAttemptID(u *uint64) *AnswerSubmissionUpdate {
	if u != nil {
		asu.SetSubmissionAttemptID(*u)
	}
	return asu
}

// SetQuestionID sets the "question_id" field.
func (asu *AnswerSubmissionUpdate) SetQuestionID(u uint64) *AnswerSubmissionUpdate {
	asu.mutation.SetQuestionID(u)
	return asu
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableQuestionID(u *uint64) *AnswerSubmissionUpdate {
	if u != nil {
		asu.SetQuestionID(*u)
	}
	return asu
}

// SetAnswer sets the "answer" field.
func (asu *AnswerSubmissionUpdate) SetAnswer(s string) *AnswerSubmissionUpdate {
	asu.mutation.SetAnswer(s)
	return asu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableAnswer(s *string) *AnswerSubmissionUpdate {
	if s != nil {
		asu.SetAnswer(*s)
	}
	return asu
}

// SetRelevance sets the "relevance" field.
func (asu *AnswerSubmissionUpdate) SetRelevance(f float64) *AnswerSubmissionUpdate {
	asu.mutation.ResetRelevance()
	asu.mutation.SetRelevance(f)
	return asu
}

// SetNillableRelevance sets the "relevance" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableRelevance(f *float64) *AnswerSubmissionUpdate {
	if f != nil {
		asu.SetRelevance(*f)
	}
	return asu
}

// AddRelevance adds f to the "relevance" field.
func (asu *AnswerSubmissionUpdate) AddRelevance(f float64) *AnswerSubmissionUpdate {
	asu.mutation.AddRelevance(f)
	return asu
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (asu *AnswerSubmissionUpdate) SetClarityCompleteness(f float64) *AnswerSubmissionUpdate {
	asu.mutation.ResetClarityCompleteness()
	asu.mutation.SetClarityCompleteness(f)
	return asu
}

// SetNillableClarityCompleteness sets the "clarity_completeness" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableClarityCompleteness(f *float64) *AnswerSubmissionUpdate {
	if f != nil {
		asu.SetClarityCompleteness(*f)
	}
	return asu
}

// AddClarityCompleteness adds f to the "clarity_completeness" field.
func (asu *AnswerSubmissionUpdate) AddClarityCompleteness(f float64) *AnswerSubmissionUpdate {
	asu.mutation.AddClarityCompleteness(f)
	return asu
}

// SetAccuracy sets the "accuracy" field.
func (asu *AnswerSubmissionUpdate) SetAccuracy(f float64) *AnswerSubmissionUpdate {
	asu.mutation.ResetAccuracy()
	asu.mutation.SetAccuracy(f)
	return asu
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableAccuracy(f *float64) *AnswerSubmissionUpdate {
	if f != nil {
		asu.SetAccuracy(*f)
	}
	return asu
}

// AddAccuracy adds f to the "accuracy" field.
func (asu *AnswerSubmissionUpdate) AddAccuracy(f float64) *AnswerSubmissionUpdate {
	asu.mutation.AddAccuracy(f)
	return asu
}

// SetOverall sets the "overall" field.
func (asu *AnswerSubmissionUpdate) SetOverall(f float64) *AnswerSubmissionUpdate {
	asu.mutation.ResetOverall()
	asu.mutation.SetOverall(f)
	return asu
}

// SetNillableOverall sets the "overall" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableOverall(f *float64) *AnswerSubmissionUpdate {
	if f != nil {
		asu.SetOverall(*f)
	}
	return asu
}

// AddOverall adds f to the "overall" field.
func (asu *AnswerSubmissionUpdate) AddOverall(f float64) *AnswerSubmissionUpdate {
	asu.mutation.AddOverall(f)
	return asu
}

// SetStatus sets the "status" field.
func (asu *AnswerSubmissionUpdate) SetStatus(es ekko.SubmissionStatus) *AnswerSubmissionUpdate {
	asu.mutation.ResetStatus()
	asu.mutation.SetStatus(es)
	return asu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asu *AnswerSubmissionUpdate) SetNillableStatus(es *ekko.SubmissionStatus) *AnswerSubmissionUpdate {
	if es != nil {
		asu.SetStatus(*es)
	}
	return asu
}

// AddStatus adds es to the "status" field.
func (asu *AnswerSubmissionUpdate) AddStatus(es ekko.SubmissionStatus) *AnswerSubmissionUpdate {
	asu.mutation.AddStatus(es)
	return asu
}

// SetSubmissionAttempt sets the "submission_attempt" edge to the SubmissionAttempt entity.
func (asu *AnswerSubmissionUpdate) SetSubmissionAttempt(s *SubmissionAttempt) *AnswerSubmissionUpdate {
	return asu.SetSubmissionAttemptID(s.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (asu *AnswerSubmissionUpdate) SetQuestion(q *Question) *AnswerSubmissionUpdate {
	return asu.SetQuestionID(q.ID)
}

// Mutation returns the AnswerSubmissionMutation object of the builder.
func (asu *AnswerSubmissionUpdate) Mutation() *AnswerSubmissionMutation {
	return asu.mutation
}

// ClearSubmissionAttempt clears the "submission_attempt" edge to the SubmissionAttempt entity.
func (asu *AnswerSubmissionUpdate) ClearSubmissionAttempt() *AnswerSubmissionUpdate {
	asu.mutation.ClearSubmissionAttempt()
	return asu
}

// ClearQuestion clears the "question" edge to the Question entity.
func (asu *AnswerSubmissionUpdate) ClearQuestion() *AnswerSubmissionUpdate {
	asu.mutation.ClearQuestion()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AnswerSubmissionUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AnswerSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AnswerSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AnswerSubmissionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AnswerSubmissionUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := answersubmission.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AnswerSubmissionUpdate) check() error {
	if asu.mutation.SubmissionAttemptCleared() && len(asu.mutation.SubmissionAttemptIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerSubmission.submission_attempt"`)
	}
	if asu.mutation.QuestionCleared() && len(asu.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerSubmission.question"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AnswerSubmissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AnswerSubmissionUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AnswerSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(answersubmission.Table, answersubmission.Columns, sqlgraph.NewFieldSpec(answersubmission.FieldID, field.TypeUint64))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(answersubmission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asu.mutation.Answer(); ok {
		_spec.SetField(answersubmission.FieldAnswer, field.TypeString, value)
	}
	if value, ok := asu.mutation.Relevance(); ok {
		_spec.SetField(answersubmission.FieldRelevance, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.AddedRelevance(); ok {
		_spec.AddField(answersubmission.FieldRelevance, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.ClarityCompleteness(); ok {
		_spec.SetField(answersubmission.FieldClarityCompleteness, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.AddedClarityCompleteness(); ok {
		_spec.AddField(answersubmission.FieldClarityCompleteness, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.Accuracy(); ok {
		_spec.SetField(answersubmission.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.AddedAccuracy(); ok {
		_spec.AddField(answersubmission.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.Overall(); ok {
		_spec.SetField(answersubmission.FieldOverall, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.AddedOverall(); ok {
		_spec.AddField(answersubmission.FieldOverall, field.TypeFloat64, value)
	}
	if value, ok := asu.mutation.Status(); ok {
		_spec.SetField(answersubmission.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := asu.mutation.AddedStatus(); ok {
		_spec.AddField(answersubmission.FieldStatus, field.TypeInt32, value)
	}
	if asu.mutation.SubmissionAttemptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.SubmissionAttemptTable,
			Columns: []string{answersubmission.SubmissionAttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.SubmissionAttemptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.SubmissionAttemptTable,
			Columns: []string{answersubmission.SubmissionAttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.QuestionTable,
			Columns: []string{answersubmission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.QuestionTable,
			Columns: []string{answersubmission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answersubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AnswerSubmissionUpdateOne is the builder for updating a single AnswerSubmission entity.
type AnswerSubmissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AnswerSubmissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AnswerSubmissionUpdateOne) SetUpdatedAt(t time.Time) *AnswerSubmissionUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetSubmissionAttemptID sets the "submission_attempt_id" field.
func (asuo *AnswerSubmissionUpdateOne) SetSubmissionAttemptID(u uint64) *AnswerSubmissionUpdateOne {
	asuo.mutation.SetSubmissionAttemptID(u)
	return asuo
}

// SetNillableSubmissionAttemptID sets the "submission_attempt_id" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableSubmissionAttemptID(u *uint64) *AnswerSubmissionUpdateOne {
	if u != nil {
		asuo.SetSubmissionAttemptID(*u)
	}
	return asuo
}

// SetQuestionID sets the "question_id" field.
func (asuo *AnswerSubmissionUpdateOne) SetQuestionID(u uint64) *AnswerSubmissionUpdateOne {
	asuo.mutation.SetQuestionID(u)
	return asuo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableQuestionID(u *uint64) *AnswerSubmissionUpdateOne {
	if u != nil {
		asuo.SetQuestionID(*u)
	}
	return asuo
}

// SetAnswer sets the "answer" field.
func (asuo *AnswerSubmissionUpdateOne) SetAnswer(s string) *AnswerSubmissionUpdateOne {
	asuo.mutation.SetAnswer(s)
	return asuo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableAnswer(s *string) *AnswerSubmissionUpdateOne {
	if s != nil {
		asuo.SetAnswer(*s)
	}
	return asuo
}

// SetRelevance sets the "relevance" field.
func (asuo *AnswerSubmissionUpdateOne) SetRelevance(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.ResetRelevance()
	asuo.mutation.SetRelevance(f)
	return asuo
}

// SetNillableRelevance sets the "relevance" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableRelevance(f *float64) *AnswerSubmissionUpdateOne {
	if f != nil {
		asuo.SetRelevance(*f)
	}
	return asuo
}

// AddRelevance adds f to the "relevance" field.
func (asuo *AnswerSubmissionUpdateOne) AddRelevance(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.AddRelevance(f)
	return asuo
}

// SetClarityCompleteness sets the "clarity_completeness" field.
func (asuo *AnswerSubmissionUpdateOne) SetClarityCompleteness(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.ResetClarityCompleteness()
	asuo.mutation.SetClarityCompleteness(f)
	return asuo
}

// SetNillableClarityCompleteness sets the "clarity_completeness" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableClarityCompleteness(f *float64) *AnswerSubmissionUpdateOne {
	if f != nil {
		asuo.SetClarityCompleteness(*f)
	}
	return asuo
}

// AddClarityCompleteness adds f to the "clarity_completeness" field.
func (asuo *AnswerSubmissionUpdateOne) AddClarityCompleteness(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.AddClarityCompleteness(f)
	return asuo
}

// SetAccuracy sets the "accuracy" field.
func (asuo *AnswerSubmissionUpdateOne) SetAccuracy(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.ResetAccuracy()
	asuo.mutation.SetAccuracy(f)
	return asuo
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableAccuracy(f *float64) *AnswerSubmissionUpdateOne {
	if f != nil {
		asuo.SetAccuracy(*f)
	}
	return asuo
}

// AddAccuracy adds f to the "accuracy" field.
func (asuo *AnswerSubmissionUpdateOne) AddAccuracy(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.AddAccuracy(f)
	return asuo
}

// SetOverall sets the "overall" field.
func (asuo *AnswerSubmissionUpdateOne) SetOverall(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.ResetOverall()
	asuo.mutation.SetOverall(f)
	return asuo
}

// SetNillableOverall sets the "overall" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableOverall(f *float64) *AnswerSubmissionUpdateOne {
	if f != nil {
		asuo.SetOverall(*f)
	}
	return asuo
}

// AddOverall adds f to the "overall" field.
func (asuo *AnswerSubmissionUpdateOne) AddOverall(f float64) *AnswerSubmissionUpdateOne {
	asuo.mutation.AddOverall(f)
	return asuo
}

// SetStatus sets the "status" field.
func (asuo *AnswerSubmissionUpdateOne) SetStatus(es ekko.SubmissionStatus) *AnswerSubmissionUpdateOne {
	asuo.mutation.ResetStatus()
	asuo.mutation.SetStatus(es)
	return asuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (asuo *AnswerSubmissionUpdateOne) SetNillableStatus(es *ekko.SubmissionStatus) *AnswerSubmissionUpdateOne {
	if es != nil {
		asuo.SetStatus(*es)
	}
	return asuo
}

// AddStatus adds es to the "status" field.
func (asuo *AnswerSubmissionUpdateOne) AddStatus(es ekko.SubmissionStatus) *AnswerSubmissionUpdateOne {
	asuo.mutation.AddStatus(es)
	return asuo
}

// SetSubmissionAttempt sets the "submission_attempt" edge to the SubmissionAttempt entity.
func (asuo *AnswerSubmissionUpdateOne) SetSubmissionAttempt(s *SubmissionAttempt) *AnswerSubmissionUpdateOne {
	return asuo.SetSubmissionAttemptID(s.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (asuo *AnswerSubmissionUpdateOne) SetQuestion(q *Question) *AnswerSubmissionUpdateOne {
	return asuo.SetQuestionID(q.ID)
}

// Mutation returns the AnswerSubmissionMutation object of the builder.
func (asuo *AnswerSubmissionUpdateOne) Mutation() *AnswerSubmissionMutation {
	return asuo.mutation
}

// ClearSubmissionAttempt clears the "submission_attempt" edge to the SubmissionAttempt entity.
func (asuo *AnswerSubmissionUpdateOne) ClearSubmissionAttempt() *AnswerSubmissionUpdateOne {
	asuo.mutation.ClearSubmissionAttempt()
	return asuo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (asuo *AnswerSubmissionUpdateOne) ClearQuestion() *AnswerSubmissionUpdateOne {
	asuo.mutation.ClearQuestion()
	return asuo
}

// Where appends a list predicates to the AnswerSubmissionUpdate builder.
func (asuo *AnswerSubmissionUpdateOne) Where(ps ...predicate.AnswerSubmission) *AnswerSubmissionUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AnswerSubmissionUpdateOne) Select(field string, fields ...string) *AnswerSubmissionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AnswerSubmission entity.
func (asuo *AnswerSubmissionUpdateOne) Save(ctx context.Context) (*AnswerSubmission, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AnswerSubmissionUpdateOne) SaveX(ctx context.Context) *AnswerSubmission {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AnswerSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AnswerSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AnswerSubmissionUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := answersubmission.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AnswerSubmissionUpdateOne) check() error {
	if asuo.mutation.SubmissionAttemptCleared() && len(asuo.mutation.SubmissionAttemptIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerSubmission.submission_attempt"`)
	}
	if asuo.mutation.QuestionCleared() && len(asuo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerSubmission.question"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AnswerSubmissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AnswerSubmissionUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AnswerSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *AnswerSubmission, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(answersubmission.Table, answersubmission.Columns, sqlgraph.NewFieldSpec(answersubmission.FieldID, field.TypeUint64))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnswerSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answersubmission.FieldID)
		for _, f := range fields {
			if !answersubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answersubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(answersubmission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.Answer(); ok {
		_spec.SetField(answersubmission.FieldAnswer, field.TypeString, value)
	}
	if value, ok := asuo.mutation.Relevance(); ok {
		_spec.SetField(answersubmission.FieldRelevance, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.AddedRelevance(); ok {
		_spec.AddField(answersubmission.FieldRelevance, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.ClarityCompleteness(); ok {
		_spec.SetField(answersubmission.FieldClarityCompleteness, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.AddedClarityCompleteness(); ok {
		_spec.AddField(answersubmission.FieldClarityCompleteness, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.Accuracy(); ok {
		_spec.SetField(answersubmission.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.AddedAccuracy(); ok {
		_spec.AddField(answersubmission.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.Overall(); ok {
		_spec.SetField(answersubmission.FieldOverall, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.AddedOverall(); ok {
		_spec.AddField(answersubmission.FieldOverall, field.TypeFloat64, value)
	}
	if value, ok := asuo.mutation.Status(); ok {
		_spec.SetField(answersubmission.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := asuo.mutation.AddedStatus(); ok {
		_spec.AddField(answersubmission.FieldStatus, field.TypeInt32, value)
	}
	if asuo.mutation.SubmissionAttemptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.SubmissionAttemptTable,
			Columns: []string{answersubmission.SubmissionAttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.SubmissionAttemptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.SubmissionAttemptTable,
			Columns: []string{answersubmission.SubmissionAttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.QuestionTable,
			Columns: []string{answersubmission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answersubmission.QuestionTable,
			Columns: []string{answersubmission.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AnswerSubmission{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answersubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
