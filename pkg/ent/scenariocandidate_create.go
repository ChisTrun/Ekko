// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/pkg/ent/scenario"
	"ekko/pkg/ent/scenariocandidate"
	"ekko/pkg/ent/submissionattempt"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioCandidateCreate is the builder for creating a ScenarioCandidate entity.
type ScenarioCandidateCreate struct {
	config
	mutation *ScenarioCandidateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (scc *ScenarioCandidateCreate) SetCreatedAt(t time.Time) *ScenarioCandidateCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ScenarioCandidateCreate) SetNillableCreatedAt(t *time.Time) *ScenarioCandidateCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ScenarioCandidateCreate) SetUpdatedAt(t time.Time) *ScenarioCandidateCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ScenarioCandidateCreate) SetNillableUpdatedAt(t *time.Time) *ScenarioCandidateCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetCandidateID sets the "candidate_id" field.
func (scc *ScenarioCandidateCreate) SetCandidateID(u uint64) *ScenarioCandidateCreate {
	scc.mutation.SetCandidateID(u)
	return scc
}

// SetScenarioID sets the "scenario_id" field.
func (scc *ScenarioCandidateCreate) SetScenarioID(u uint64) *ScenarioCandidateCreate {
	scc.mutation.SetScenarioID(u)
	return scc
}

// SetID sets the "id" field.
func (scc *ScenarioCandidateCreate) SetID(u uint64) *ScenarioCandidateCreate {
	scc.mutation.SetID(u)
	return scc
}

// SetScenario sets the "scenario" edge to the Scenario entity.
func (scc *ScenarioCandidateCreate) SetScenario(s *Scenario) *ScenarioCandidateCreate {
	return scc.SetScenarioID(s.ID)
}

// AddAttemptIDs adds the "attempts" edge to the SubmissionAttempt entity by IDs.
func (scc *ScenarioCandidateCreate) AddAttemptIDs(ids ...uint64) *ScenarioCandidateCreate {
	scc.mutation.AddAttemptIDs(ids...)
	return scc
}

// AddAttempts adds the "attempts" edges to the SubmissionAttempt entity.
func (scc *ScenarioCandidateCreate) AddAttempts(s ...*SubmissionAttempt) *ScenarioCandidateCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scc.AddAttemptIDs(ids...)
}

// Mutation returns the ScenarioCandidateMutation object of the builder.
func (scc *ScenarioCandidateCreate) Mutation() *ScenarioCandidateMutation {
	return scc.mutation
}

// Save creates the ScenarioCandidate in the database.
func (scc *ScenarioCandidateCreate) Save(ctx context.Context) (*ScenarioCandidate, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ScenarioCandidateCreate) SaveX(ctx context.Context) *ScenarioCandidate {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ScenarioCandidateCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ScenarioCandidateCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ScenarioCandidateCreate) defaults() {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := scenariocandidate.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := scenariocandidate.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ScenarioCandidateCreate) check() error {
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScenarioCandidate.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ScenarioCandidate.updated_at"`)}
	}
	if _, ok := scc.mutation.CandidateID(); !ok {
		return &ValidationError{Name: "candidate_id", err: errors.New(`ent: missing required field "ScenarioCandidate.candidate_id"`)}
	}
	if _, ok := scc.mutation.ScenarioID(); !ok {
		return &ValidationError{Name: "scenario_id", err: errors.New(`ent: missing required field "ScenarioCandidate.scenario_id"`)}
	}
	if len(scc.mutation.ScenarioIDs()) == 0 {
		return &ValidationError{Name: "scenario", err: errors.New(`ent: missing required edge "ScenarioCandidate.scenario"`)}
	}
	return nil
}

func (scc *ScenarioCandidateCreate) sqlSave(ctx context.Context) (*ScenarioCandidate, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ScenarioCandidateCreate) createSpec() (*ScenarioCandidate, *sqlgraph.CreateSpec) {
	var (
		_node = &ScenarioCandidate{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(scenariocandidate.Table, sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = scc.conflict
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(scenariocandidate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(scenariocandidate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.CandidateID(); ok {
		_spec.SetField(scenariocandidate.FieldCandidateID, field.TypeUint64, value)
		_node.CandidateID = value
	}
	if nodes := scc.mutation.ScenarioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scenariocandidate.ScenarioTable,
			Columns: []string{scenariocandidate.ScenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenarioID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenariocandidate.AttemptsTable,
			Columns: []string{scenariocandidate.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(submissionattempt.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScenarioCandidate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioCandidateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scc *ScenarioCandidateCreate) OnConflict(opts ...sql.ConflictOption) *ScenarioCandidateUpsertOne {
	scc.conflict = opts
	return &ScenarioCandidateUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scc *ScenarioCandidateCreate) OnConflictColumns(columns ...string) *ScenarioCandidateUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &ScenarioCandidateUpsertOne{
		create: scc,
	}
}

type (
	// ScenarioCandidateUpsertOne is the builder for "upsert"-ing
	//  one ScenarioCandidate node.
	ScenarioCandidateUpsertOne struct {
		create *ScenarioCandidateCreate
	}

	// ScenarioCandidateUpsert is the "OnConflict" setter.
	ScenarioCandidateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioCandidateUpsert) SetUpdatedAt(v time.Time) *ScenarioCandidateUpsert {
	u.Set(scenariocandidate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioCandidateUpsert) UpdateUpdatedAt() *ScenarioCandidateUpsert {
	u.SetExcluded(scenariocandidate.FieldUpdatedAt)
	return u
}

// SetCandidateID sets the "candidate_id" field.
func (u *ScenarioCandidateUpsert) SetCandidateID(v uint64) *ScenarioCandidateUpsert {
	u.Set(scenariocandidate.FieldCandidateID, v)
	return u
}

// UpdateCandidateID sets the "candidate_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsert) UpdateCandidateID() *ScenarioCandidateUpsert {
	u.SetExcluded(scenariocandidate.FieldCandidateID)
	return u
}

// AddCandidateID adds v to the "candidate_id" field.
func (u *ScenarioCandidateUpsert) AddCandidateID(v uint64) *ScenarioCandidateUpsert {
	u.Add(scenariocandidate.FieldCandidateID, v)
	return u
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioCandidateUpsert) SetScenarioID(v uint64) *ScenarioCandidateUpsert {
	u.Set(scenariocandidate.FieldScenarioID, v)
	return u
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsert) UpdateScenarioID() *ScenarioCandidateUpsert {
	u.SetExcluded(scenariocandidate.FieldScenarioID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenariocandidate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioCandidateUpsertOne) UpdateNewValues() *ScenarioCandidateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scenariocandidate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scenariocandidate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScenarioCandidateUpsertOne) Ignore() *ScenarioCandidateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioCandidateUpsertOne) DoNothing() *ScenarioCandidateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCandidateCreate.OnConflict
// documentation for more info.
func (u *ScenarioCandidateUpsertOne) Update(set func(*ScenarioCandidateUpsert)) *ScenarioCandidateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioCandidateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioCandidateUpsertOne) SetUpdatedAt(v time.Time) *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertOne) UpdateUpdatedAt() *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCandidateID sets the "candidate_id" field.
func (u *ScenarioCandidateUpsertOne) SetCandidateID(v uint64) *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetCandidateID(v)
	})
}

// AddCandidateID adds v to the "candidate_id" field.
func (u *ScenarioCandidateUpsertOne) AddCandidateID(v uint64) *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.AddCandidateID(v)
	})
}

// UpdateCandidateID sets the "candidate_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertOne) UpdateCandidateID() *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateCandidateID()
	})
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioCandidateUpsertOne) SetScenarioID(v uint64) *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetScenarioID(v)
	})
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertOne) UpdateScenarioID() *ScenarioCandidateUpsertOne {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateScenarioID()
	})
}

// Exec executes the query.
func (u *ScenarioCandidateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCandidateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioCandidateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScenarioCandidateUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScenarioCandidateUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScenarioCandidateCreateBulk is the builder for creating many ScenarioCandidate entities in bulk.
type ScenarioCandidateCreateBulk struct {
	config
	err      error
	builders []*ScenarioCandidateCreate
	conflict []sql.ConflictOption
}

// Save creates the ScenarioCandidate entities in the database.
func (sccb *ScenarioCandidateCreateBulk) Save(ctx context.Context) ([]*ScenarioCandidate, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ScenarioCandidate, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenarioCandidateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ScenarioCandidateCreateBulk) SaveX(ctx context.Context) []*ScenarioCandidate {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ScenarioCandidateCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ScenarioCandidateCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ScenarioCandidate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioCandidateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sccb *ScenarioCandidateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScenarioCandidateUpsertBulk {
	sccb.conflict = opts
	return &ScenarioCandidateUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccb *ScenarioCandidateCreateBulk) OnConflictColumns(columns ...string) *ScenarioCandidateUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &ScenarioCandidateUpsertBulk{
		create: sccb,
	}
}

// ScenarioCandidateUpsertBulk is the builder for "upsert"-ing
// a bulk of ScenarioCandidate nodes.
type ScenarioCandidateUpsertBulk struct {
	create *ScenarioCandidateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenariocandidate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioCandidateUpsertBulk) UpdateNewValues() *ScenarioCandidateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scenariocandidate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scenariocandidate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ScenarioCandidate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScenarioCandidateUpsertBulk) Ignore() *ScenarioCandidateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioCandidateUpsertBulk) DoNothing() *ScenarioCandidateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCandidateCreateBulk.OnConflict
// documentation for more info.
func (u *ScenarioCandidateUpsertBulk) Update(set func(*ScenarioCandidateUpsert)) *ScenarioCandidateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioCandidateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScenarioCandidateUpsertBulk) SetUpdatedAt(v time.Time) *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertBulk) UpdateUpdatedAt() *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCandidateID sets the "candidate_id" field.
func (u *ScenarioCandidateUpsertBulk) SetCandidateID(v uint64) *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetCandidateID(v)
	})
}

// AddCandidateID adds v to the "candidate_id" field.
func (u *ScenarioCandidateUpsertBulk) AddCandidateID(v uint64) *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.AddCandidateID(v)
	})
}

// UpdateCandidateID sets the "candidate_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertBulk) UpdateCandidateID() *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateCandidateID()
	})
}

// SetScenarioID sets the "scenario_id" field.
func (u *ScenarioCandidateUpsertBulk) SetScenarioID(v uint64) *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.SetScenarioID(v)
	})
}

// UpdateScenarioID sets the "scenario_id" field to the value that was provided on create.
func (u *ScenarioCandidateUpsertBulk) UpdateScenarioID() *ScenarioCandidateUpsertBulk {
	return u.Update(func(s *ScenarioCandidateUpsert) {
		s.UpdateScenarioID()
	})
}

// Exec executes the query.
func (u *ScenarioCandidateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScenarioCandidateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCandidateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioCandidateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
