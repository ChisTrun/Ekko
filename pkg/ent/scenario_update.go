// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ekko/pkg/ent/predicate"
	"ekko/pkg/ent/question"
	"ekko/pkg/ent/scenario"
	"ekko/pkg/ent/scenariocandidate"
	"ekko/pkg/ent/scenariofavorite"
	"ekko/pkg/ent/scenariofield"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScenarioUpdate is the builder for updating Scenario entities.
type ScenarioUpdate struct {
	config
	hooks     []Hook
	mutation  *ScenarioMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScenarioUpdate builder.
func (su *ScenarioUpdate) Where(ps ...predicate.Scenario) *ScenarioUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScenarioUpdate) SetUpdatedAt(t time.Time) *ScenarioUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetBmID sets the "bm_id" field.
func (su *ScenarioUpdate) SetBmID(u uint64) *ScenarioUpdate {
	su.mutation.ResetBmID()
	su.mutation.SetBmID(u)
	return su
}

// SetNillableBmID sets the "bm_id" field if the given value is not nil.
func (su *ScenarioUpdate) SetNillableBmID(u *uint64) *ScenarioUpdate {
	if u != nil {
		su.SetBmID(*u)
	}
	return su
}

// AddBmID adds u to the "bm_id" field.
func (su *ScenarioUpdate) AddBmID(u int64) *ScenarioUpdate {
	su.mutation.AddBmID(u)
	return su
}

// SetName sets the "name" field.
func (su *ScenarioUpdate) SetName(s string) *ScenarioUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ScenarioUpdate) SetNillableName(s *string) *ScenarioUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *ScenarioUpdate) SetDescription(s string) *ScenarioUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ScenarioUpdate) SetNillableDescription(s *string) *ScenarioUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetRating sets the "rating" field.
func (su *ScenarioUpdate) SetRating(f float64) *ScenarioUpdate {
	su.mutation.ResetRating()
	su.mutation.SetRating(f)
	return su
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (su *ScenarioUpdate) SetNillableRating(f *float64) *ScenarioUpdate {
	if f != nil {
		su.SetRating(*f)
	}
	return su
}

// AddRating adds f to the "rating" field.
func (su *ScenarioUpdate) AddRating(f float64) *ScenarioUpdate {
	su.mutation.AddRating(f)
	return su
}

// SetParticipants sets the "participants" field.
func (su *ScenarioUpdate) SetParticipants(i int32) *ScenarioUpdate {
	su.mutation.ResetParticipants()
	su.mutation.SetParticipants(i)
	return su
}

// SetNillableParticipants sets the "participants" field if the given value is not nil.
func (su *ScenarioUpdate) SetNillableParticipants(i *int32) *ScenarioUpdate {
	if i != nil {
		su.SetParticipants(*i)
	}
	return su
}

// AddParticipants adds i to the "participants" field.
func (su *ScenarioUpdate) AddParticipants(i int32) *ScenarioUpdate {
	su.mutation.AddParticipants(i)
	return su
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (su *ScenarioUpdate) AddQuestionIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.AddQuestionIDs(ids...)
	return su
}

// AddQuestions adds the "questions" edges to the Question entity.
func (su *ScenarioUpdate) AddQuestions(q ...*Question) *ScenarioUpdate {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return su.AddQuestionIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the ScenarioCandidate entity by IDs.
func (su *ScenarioUpdate) AddCandidateIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.AddCandidateIDs(ids...)
	return su
}

// AddCandidates adds the "candidates" edges to the ScenarioCandidate entity.
func (su *ScenarioUpdate) AddCandidates(s ...*ScenarioCandidate) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddCandidateIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the ScenarioFavorite entity by IDs.
func (su *ScenarioUpdate) AddFavoriteIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.AddFavoriteIDs(ids...)
	return su
}

// AddFavorites adds the "favorites" edges to the ScenarioFavorite entity.
func (su *ScenarioUpdate) AddFavorites(s ...*ScenarioFavorite) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddFavoriteIDs(ids...)
}

// AddFieldIDs adds the "field" edge to the ScenarioField entity by IDs.
func (su *ScenarioUpdate) AddFieldIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.AddFieldIDs(ids...)
	return su
}

// AddField adds the "field" edges to the ScenarioField entity.
func (su *ScenarioUpdate) AddField(s ...*ScenarioField) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddFieldIDs(ids...)
}

// Mutation returns the ScenarioMutation object of the builder.
func (su *ScenarioUpdate) Mutation() *ScenarioMutation {
	return su.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (su *ScenarioUpdate) ClearQuestions() *ScenarioUpdate {
	su.mutation.ClearQuestions()
	return su
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (su *ScenarioUpdate) RemoveQuestionIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.RemoveQuestionIDs(ids...)
	return su
}

// RemoveQuestions removes "questions" edges to Question entities.
func (su *ScenarioUpdate) RemoveQuestions(q ...*Question) *ScenarioUpdate {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return su.RemoveQuestionIDs(ids...)
}

// ClearCandidates clears all "candidates" edges to the ScenarioCandidate entity.
func (su *ScenarioUpdate) ClearCandidates() *ScenarioUpdate {
	su.mutation.ClearCandidates()
	return su
}

// RemoveCandidateIDs removes the "candidates" edge to ScenarioCandidate entities by IDs.
func (su *ScenarioUpdate) RemoveCandidateIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.RemoveCandidateIDs(ids...)
	return su
}

// RemoveCandidates removes "candidates" edges to ScenarioCandidate entities.
func (su *ScenarioUpdate) RemoveCandidates(s ...*ScenarioCandidate) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveCandidateIDs(ids...)
}

// ClearFavorites clears all "favorites" edges to the ScenarioFavorite entity.
func (su *ScenarioUpdate) ClearFavorites() *ScenarioUpdate {
	su.mutation.ClearFavorites()
	return su
}

// RemoveFavoriteIDs removes the "favorites" edge to ScenarioFavorite entities by IDs.
func (su *ScenarioUpdate) RemoveFavoriteIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.RemoveFavoriteIDs(ids...)
	return su
}

// RemoveFavorites removes "favorites" edges to ScenarioFavorite entities.
func (su *ScenarioUpdate) RemoveFavorites(s ...*ScenarioFavorite) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveFavoriteIDs(ids...)
}

// ClearFieldEdge clears all "field" edges to the ScenarioField entity.
func (su *ScenarioUpdate) ClearFieldEdge() *ScenarioUpdate {
	su.mutation.ClearFieldEdge()
	return su
}

// RemoveFieldIDs removes the "field" edge to ScenarioField entities by IDs.
func (su *ScenarioUpdate) RemoveFieldIDs(ids ...uint64) *ScenarioUpdate {
	su.mutation.RemoveFieldIDs(ids...)
	return su
}

// RemoveField removes "field" edges to ScenarioField entities.
func (su *ScenarioUpdate) RemoveField(s ...*ScenarioField) *ScenarioUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveFieldIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScenarioUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScenarioUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScenarioUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScenarioUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScenarioUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := scenario.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ScenarioUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ScenarioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenario.Table, scenario.Columns, sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(scenario.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.BmID(); ok {
		_spec.SetField(scenario.FieldBmID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedBmID(); ok {
		_spec.AddField(scenario.FieldBmID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(scenario.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(scenario.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Rating(); ok {
		_spec.SetField(scenario.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedRating(); ok {
		_spec.AddField(scenario.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Participants(); ok {
		_spec.SetField(scenario.FieldParticipants, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedParticipants(); ok {
		_spec.AddField(scenario.FieldParticipants, field.TypeInt32, value)
	}
	if su.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !su.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !su.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !su.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FieldEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedFieldIDs(); len(nodes) > 0 && !su.mutation.FieldEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenario.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScenarioUpdateOne is the builder for updating a single Scenario entity.
type ScenarioUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScenarioMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScenarioUpdateOne) SetUpdatedAt(t time.Time) *ScenarioUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetBmID sets the "bm_id" field.
func (suo *ScenarioUpdateOne) SetBmID(u uint64) *ScenarioUpdateOne {
	suo.mutation.ResetBmID()
	suo.mutation.SetBmID(u)
	return suo
}

// SetNillableBmID sets the "bm_id" field if the given value is not nil.
func (suo *ScenarioUpdateOne) SetNillableBmID(u *uint64) *ScenarioUpdateOne {
	if u != nil {
		suo.SetBmID(*u)
	}
	return suo
}

// AddBmID adds u to the "bm_id" field.
func (suo *ScenarioUpdateOne) AddBmID(u int64) *ScenarioUpdateOne {
	suo.mutation.AddBmID(u)
	return suo
}

// SetName sets the "name" field.
func (suo *ScenarioUpdateOne) SetName(s string) *ScenarioUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ScenarioUpdateOne) SetNillableName(s *string) *ScenarioUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *ScenarioUpdateOne) SetDescription(s string) *ScenarioUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ScenarioUpdateOne) SetNillableDescription(s *string) *ScenarioUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetRating sets the "rating" field.
func (suo *ScenarioUpdateOne) SetRating(f float64) *ScenarioUpdateOne {
	suo.mutation.ResetRating()
	suo.mutation.SetRating(f)
	return suo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (suo *ScenarioUpdateOne) SetNillableRating(f *float64) *ScenarioUpdateOne {
	if f != nil {
		suo.SetRating(*f)
	}
	return suo
}

// AddRating adds f to the "rating" field.
func (suo *ScenarioUpdateOne) AddRating(f float64) *ScenarioUpdateOne {
	suo.mutation.AddRating(f)
	return suo
}

// SetParticipants sets the "participants" field.
func (suo *ScenarioUpdateOne) SetParticipants(i int32) *ScenarioUpdateOne {
	suo.mutation.ResetParticipants()
	suo.mutation.SetParticipants(i)
	return suo
}

// SetNillableParticipants sets the "participants" field if the given value is not nil.
func (suo *ScenarioUpdateOne) SetNillableParticipants(i *int32) *ScenarioUpdateOne {
	if i != nil {
		suo.SetParticipants(*i)
	}
	return suo
}

// AddParticipants adds i to the "participants" field.
func (suo *ScenarioUpdateOne) AddParticipants(i int32) *ScenarioUpdateOne {
	suo.mutation.AddParticipants(i)
	return suo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (suo *ScenarioUpdateOne) AddQuestionIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.AddQuestionIDs(ids...)
	return suo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (suo *ScenarioUpdateOne) AddQuestions(q ...*Question) *ScenarioUpdateOne {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return suo.AddQuestionIDs(ids...)
}

// AddCandidateIDs adds the "candidates" edge to the ScenarioCandidate entity by IDs.
func (suo *ScenarioUpdateOne) AddCandidateIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.AddCandidateIDs(ids...)
	return suo
}

// AddCandidates adds the "candidates" edges to the ScenarioCandidate entity.
func (suo *ScenarioUpdateOne) AddCandidates(s ...*ScenarioCandidate) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddCandidateIDs(ids...)
}

// AddFavoriteIDs adds the "favorites" edge to the ScenarioFavorite entity by IDs.
func (suo *ScenarioUpdateOne) AddFavoriteIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.AddFavoriteIDs(ids...)
	return suo
}

// AddFavorites adds the "favorites" edges to the ScenarioFavorite entity.
func (suo *ScenarioUpdateOne) AddFavorites(s ...*ScenarioFavorite) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddFavoriteIDs(ids...)
}

// AddFieldIDs adds the "field" edge to the ScenarioField entity by IDs.
func (suo *ScenarioUpdateOne) AddFieldIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.AddFieldIDs(ids...)
	return suo
}

// AddField adds the "field" edges to the ScenarioField entity.
func (suo *ScenarioUpdateOne) AddField(s ...*ScenarioField) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddFieldIDs(ids...)
}

// Mutation returns the ScenarioMutation object of the builder.
func (suo *ScenarioUpdateOne) Mutation() *ScenarioMutation {
	return suo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (suo *ScenarioUpdateOne) ClearQuestions() *ScenarioUpdateOne {
	suo.mutation.ClearQuestions()
	return suo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (suo *ScenarioUpdateOne) RemoveQuestionIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.RemoveQuestionIDs(ids...)
	return suo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (suo *ScenarioUpdateOne) RemoveQuestions(q ...*Question) *ScenarioUpdateOne {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return suo.RemoveQuestionIDs(ids...)
}

// ClearCandidates clears all "candidates" edges to the ScenarioCandidate entity.
func (suo *ScenarioUpdateOne) ClearCandidates() *ScenarioUpdateOne {
	suo.mutation.ClearCandidates()
	return suo
}

// RemoveCandidateIDs removes the "candidates" edge to ScenarioCandidate entities by IDs.
func (suo *ScenarioUpdateOne) RemoveCandidateIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.RemoveCandidateIDs(ids...)
	return suo
}

// RemoveCandidates removes "candidates" edges to ScenarioCandidate entities.
func (suo *ScenarioUpdateOne) RemoveCandidates(s ...*ScenarioCandidate) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveCandidateIDs(ids...)
}

// ClearFavorites clears all "favorites" edges to the ScenarioFavorite entity.
func (suo *ScenarioUpdateOne) ClearFavorites() *ScenarioUpdateOne {
	suo.mutation.ClearFavorites()
	return suo
}

// RemoveFavoriteIDs removes the "favorites" edge to ScenarioFavorite entities by IDs.
func (suo *ScenarioUpdateOne) RemoveFavoriteIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.RemoveFavoriteIDs(ids...)
	return suo
}

// RemoveFavorites removes "favorites" edges to ScenarioFavorite entities.
func (suo *ScenarioUpdateOne) RemoveFavorites(s ...*ScenarioFavorite) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveFavoriteIDs(ids...)
}

// ClearFieldEdge clears all "field" edges to the ScenarioField entity.
func (suo *ScenarioUpdateOne) ClearFieldEdge() *ScenarioUpdateOne {
	suo.mutation.ClearFieldEdge()
	return suo
}

// RemoveFieldIDs removes the "field" edge to ScenarioField entities by IDs.
func (suo *ScenarioUpdateOne) RemoveFieldIDs(ids ...uint64) *ScenarioUpdateOne {
	suo.mutation.RemoveFieldIDs(ids...)
	return suo
}

// RemoveField removes "field" edges to ScenarioField entities.
func (suo *ScenarioUpdateOne) RemoveField(s ...*ScenarioField) *ScenarioUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveFieldIDs(ids...)
}

// Where appends a list predicates to the ScenarioUpdate builder.
func (suo *ScenarioUpdateOne) Where(ps ...predicate.Scenario) *ScenarioUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScenarioUpdateOne) Select(field string, fields ...string) *ScenarioUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scenario entity.
func (suo *ScenarioUpdateOne) Save(ctx context.Context) (*Scenario, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScenarioUpdateOne) SaveX(ctx context.Context) *Scenario {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScenarioUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScenarioUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScenarioUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := scenario.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ScenarioUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScenarioUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ScenarioUpdateOne) sqlSave(ctx context.Context) (_node *Scenario, err error) {
	_spec := sqlgraph.NewUpdateSpec(scenario.Table, scenario.Columns, sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scenario.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scenario.FieldID)
		for _, f := range fields {
			if !scenario.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scenario.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(scenario.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.BmID(); ok {
		_spec.SetField(scenario.FieldBmID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedBmID(); ok {
		_spec.AddField(scenario.FieldBmID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(scenario.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(scenario.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Rating(); ok {
		_spec.SetField(scenario.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedRating(); ok {
		_spec.AddField(scenario.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Participants(); ok {
		_spec.SetField(scenario.FieldParticipants, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedParticipants(); ok {
		_spec.AddField(scenario.FieldParticipants, field.TypeInt32, value)
	}
	if suo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !suo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.QuestionsTable,
			Columns: []string{scenario.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !suo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.CandidatesTable,
			Columns: []string{scenario.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariocandidate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !suo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.FavoritesTable,
			Columns: []string{scenario.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofavorite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FieldEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedFieldIDs(); len(nodes) > 0 && !suo.mutation.FieldEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   scenario.FieldTable,
			Columns: []string{scenario.FieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenariofield.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Scenario{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scenario.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
