// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ekko/pkg/ent/scenariocandidate"
	"ekko/pkg/ent/submissionattempt"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubmissionAttempt is the model entity for the SubmissionAttempt schema.
type SubmissionAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ScenarioCandidateID holds the value of the "scenario_candidate_id" field.
	ScenarioCandidateID uint64 `json:"scenario_candidate_id,omitempty"`
	// AttemptNumber holds the value of the "attempt_number" field.
	AttemptNumber int32 `json:"attempt_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionAttemptQuery when eager-loading is set.
	Edges        SubmissionAttemptEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubmissionAttemptEdges holds the relations/edges for other nodes in the graph.
type SubmissionAttemptEdges struct {
	// ScenarioCandidate holds the value of the scenario_candidate edge.
	ScenarioCandidate *ScenarioCandidate `json:"scenario_candidate,omitempty"`
	// Answers holds the value of the answers edge.
	Answers []*AnswerSubmission `json:"answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ScenarioCandidateOrErr returns the ScenarioCandidate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionAttemptEdges) ScenarioCandidateOrErr() (*ScenarioCandidate, error) {
	if e.ScenarioCandidate != nil {
		return e.ScenarioCandidate, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scenariocandidate.Label}
	}
	return nil, &NotLoadedError{edge: "scenario_candidate"}
}

// AnswersOrErr returns the Answers value or an error if the edge
// was not loaded in eager-loading.
func (e SubmissionAttemptEdges) AnswersOrErr() ([]*AnswerSubmission, error) {
	if e.loadedTypes[1] {
		return e.Answers, nil
	}
	return nil, &NotLoadedError{edge: "answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubmissionAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submissionattempt.FieldID, submissionattempt.FieldScenarioCandidateID, submissionattempt.FieldAttemptNumber:
			values[i] = new(sql.NullInt64)
		case submissionattempt.FieldCreatedAt, submissionattempt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubmissionAttempt fields.
func (sa *SubmissionAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submissionattempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = uint64(value.Int64)
		case submissionattempt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case submissionattempt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case submissionattempt.FieldScenarioCandidateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scenario_candidate_id", values[i])
			} else if value.Valid {
				sa.ScenarioCandidateID = uint64(value.Int64)
			}
		case submissionattempt.FieldAttemptNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_number", values[i])
			} else if value.Valid {
				sa.AttemptNumber = int32(value.Int64)
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubmissionAttempt.
// This includes values selected through modifiers, order, etc.
func (sa *SubmissionAttempt) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// QueryScenarioCandidate queries the "scenario_candidate" edge of the SubmissionAttempt entity.
func (sa *SubmissionAttempt) QueryScenarioCandidate() *ScenarioCandidateQuery {
	return NewSubmissionAttemptClient(sa.config).QueryScenarioCandidate(sa)
}

// QueryAnswers queries the "answers" edge of the SubmissionAttempt entity.
func (sa *SubmissionAttempt) QueryAnswers() *AnswerSubmissionQuery {
	return NewSubmissionAttemptClient(sa.config).QueryAnswers(sa)
}

// Update returns a builder for updating this SubmissionAttempt.
// Note that you need to call SubmissionAttempt.Unwrap() before calling this method if this SubmissionAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SubmissionAttempt) Update() *SubmissionAttemptUpdateOne {
	return NewSubmissionAttemptClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SubmissionAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SubmissionAttempt) Unwrap() *SubmissionAttempt {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubmissionAttempt is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SubmissionAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("SubmissionAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scenario_candidate_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.ScenarioCandidateID))
	builder.WriteString(", ")
	builder.WriteString("attempt_number=")
	builder.WriteString(fmt.Sprintf("%v", sa.AttemptNumber))
	builder.WriteByte(')')
	return builder.String()
}

// SubmissionAttempts is a parsable slice of SubmissionAttempt.
type SubmissionAttempts []*SubmissionAttempt
