// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: ekko/api/ekko_config.proto

package ekko

import (
	api "ekko/pkg/carbon/api"
	api2 "ekko/pkg/database/api"
	api1 "ekko/pkg/logger/api"
	api3 "ekko/pkg/redis/api"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Listener      *api.Listener          `protobuf:"bytes,1,opt,name=listener,proto3" json:"listener,omitempty"`
	Logger        *api1.Logger           `protobuf:"bytes,2,opt,name=logger,proto3" json:"logger,omitempty"`
	Database      *api2.Database         `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Redis         *api3.Redis            `protobuf:"bytes,4,opt,name=redis,proto3" json:"redis,omitempty"`
	HttpListener  *api.Listener          `protobuf:"bytes,8,opt,name=http_listener,json=httpListener,proto3" json:"http_listener,omitempty"`
	Rabbitmq      *RabbitMQ              `protobuf:"bytes,5,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	Bulbasaur     *InternalService       `protobuf:"bytes,6,opt,name=bulbasaur,proto3" json:"bulbasaur,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_ekko_api_ekko_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetListener() *api.Listener {
	if x != nil {
		return x.Listener
	}
	return nil
}

func (x *Config) GetLogger() *api1.Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *Config) GetDatabase() *api2.Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Config) GetRedis() *api3.Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Config) GetHttpListener() *api.Listener {
	if x != nil {
		return x.HttpListener
	}
	return nil
}

func (x *Config) GetRabbitmq() *RabbitMQ {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Config) GetBulbasaur() *InternalService {
	if x != nil {
		return x.Bulbasaur
	}
	return nil
}

type RabbitMQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Username      string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	ConsumeQueue  string                 `protobuf:"bytes,5,opt,name=consume_queue,json=consumeQueue,proto3" json:"consume_queue,omitempty"`
	PublicQueue   string                 `protobuf:"bytes,6,opt,name=public_queue,json=publicQueue,proto3" json:"public_queue,omitempty"`
	MaxConsumer   int32                  `protobuf:"varint,7,opt,name=max_consumer,json=maxConsumer,proto3" json:"max_consumer,omitempty"`
	ExpireTime    int32                  `protobuf:"varint,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RabbitMQ) Reset() {
	*x = RabbitMQ{}
	mi := &file_ekko_api_ekko_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQ) ProtoMessage() {}

func (x *RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQ.ProtoReflect.Descriptor instead.
func (*RabbitMQ) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_config_proto_rawDescGZIP(), []int{1}
}

func (x *RabbitMQ) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RabbitMQ) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RabbitMQ) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RabbitMQ) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RabbitMQ) GetConsumeQueue() string {
	if x != nil {
		return x.ConsumeQueue
	}
	return ""
}

func (x *RabbitMQ) GetPublicQueue() string {
	if x != nil {
		return x.PublicQueue
	}
	return ""
}

func (x *RabbitMQ) GetMaxConsumer() int32 {
	if x != nil {
		return x.MaxConsumer
	}
	return 0
}

func (x *RabbitMQ) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type InternalService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InternalService) Reset() {
	*x = InternalService{}
	mi := &file_ekko_api_ekko_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalService) ProtoMessage() {}

func (x *InternalService) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalService.ProtoReflect.Descriptor instead.
func (*InternalService) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_config_proto_rawDescGZIP(), []int{2}
}

func (x *InternalService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InternalService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_ekko_api_ekko_config_proto protoreflect.FileDescriptor

const file_ekko_api_ekko_config_proto_rawDesc = "" +
	"\n" +
	"\x1aekko/api/ekko_config.proto\x12\vekko.config\x1a\x17validate/validate.proto\x1a\x17logger/api/logger.proto\x1a\x17carbon/api/carbon.proto\x1a\x15redis/api/redis.proto\x1a\x1bdatabase/api/database.proto\"\xad\x03\n" +
	"\x06Config\x12?\n" +
	"\blistener\x18\x01 \x01(\v2\x19.greyhole.carbon.ListenerB\b\xfaB\x05\x8a\x01\x02\x10\x01R\blistener\x129\n" +
	"\x06logger\x18\x02 \x01(\v2\x17.greyhole.logger.LoggerB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06logger\x12A\n" +
	"\bdatabase\x18\x03 \x01(\v2\x1b.greyhole.database.DatabaseB\b\xfaB\x05\x8a\x01\x02\x10\x01R\bdatabase\x12+\n" +
	"\x05redis\x18\x04 \x01(\v2\x15.greyhole.redis.RedisR\x05redis\x12H\n" +
	"\rhttp_listener\x18\b \x01(\v2\x19.greyhole.carbon.ListenerB\b\xfaB\x05\x8a\x01\x02\x10\x01R\fhttpListener\x121\n" +
	"\brabbitmq\x18\x05 \x01(\v2\x15.ekko.config.RabbitMQR\brabbitmq\x12:\n" +
	"\tbulbasaur\x18\x06 \x01(\v2\x1c.ekko.config.InternalServiceR\tbulbasaur\"\xfc\x01\n" +
	"\bRabbitMQ\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12#\n" +
	"\rconsume_queue\x18\x05 \x01(\tR\fconsumeQueue\x12!\n" +
	"\fpublic_queue\x18\x06 \x01(\tR\vpublicQueue\x12!\n" +
	"\fmax_consumer\x18\a \x01(\x05R\vmaxConsumer\x12\x1f\n" +
	"\vexpire_time\x18\b \x01(\x05R\n" +
	"expireTime\"?\n" +
	"\x0fInternalService\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04portB\x16Z\x14ekko/pkg/config;ekkob\x06proto3"

var (
	file_ekko_api_ekko_config_proto_rawDescOnce sync.Once
	file_ekko_api_ekko_config_proto_rawDescData []byte
)

func file_ekko_api_ekko_config_proto_rawDescGZIP() []byte {
	file_ekko_api_ekko_config_proto_rawDescOnce.Do(func() {
		file_ekko_api_ekko_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ekko_api_ekko_config_proto_rawDesc), len(file_ekko_api_ekko_config_proto_rawDesc)))
	})
	return file_ekko_api_ekko_config_proto_rawDescData
}

var file_ekko_api_ekko_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ekko_api_ekko_config_proto_goTypes = []any{
	(*Config)(nil),          // 0: ekko.config.Config
	(*RabbitMQ)(nil),        // 1: ekko.config.RabbitMQ
	(*InternalService)(nil), // 2: ekko.config.InternalService
	(*api.Listener)(nil),    // 3: greyhole.carbon.Listener
	(*api1.Logger)(nil),     // 4: greyhole.logger.Logger
	(*api2.Database)(nil),   // 5: greyhole.database.Database
	(*api3.Redis)(nil),      // 6: greyhole.redis.Redis
}
var file_ekko_api_ekko_config_proto_depIdxs = []int32{
	3, // 0: ekko.config.Config.listener:type_name -> greyhole.carbon.Listener
	4, // 1: ekko.config.Config.logger:type_name -> greyhole.logger.Logger
	5, // 2: ekko.config.Config.database:type_name -> greyhole.database.Database
	6, // 3: ekko.config.Config.redis:type_name -> greyhole.redis.Redis
	3, // 4: ekko.config.Config.http_listener:type_name -> greyhole.carbon.Listener
	1, // 5: ekko.config.Config.rabbitmq:type_name -> ekko.config.RabbitMQ
	2, // 6: ekko.config.Config.bulbasaur:type_name -> ekko.config.InternalService
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ekko_api_ekko_config_proto_init() }
func file_ekko_api_ekko_config_proto_init() {
	if File_ekko_api_ekko_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ekko_api_ekko_config_proto_rawDesc), len(file_ekko_api_ekko_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ekko_api_ekko_config_proto_goTypes,
		DependencyIndexes: file_ekko_api_ekko_config_proto_depIdxs,
		MessageInfos:      file_ekko_api_ekko_config_proto_msgTypes,
	}.Build()
	File_ekko_api_ekko_config_proto = out.File
	file_ekko_api_ekko_config_proto_goTypes = nil
	file_ekko_api_ekko_config_proto_depIdxs = nil
}
