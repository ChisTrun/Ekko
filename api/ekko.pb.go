// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: ekko/api/ekko.proto

package ekko

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortType int32

const (
	SortType_SORT_TYPE_UNKNOWN SortType = 0
	SortType_SORT_TYPE_ASC     SortType = 1
	SortType_SORT_TYPE_DESC    SortType = 2
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "SORT_TYPE_UNKNOWN",
		1: "SORT_TYPE_ASC",
		2: "SORT_TYPE_DESC",
	}
	SortType_value = map[string]int32{
		"SORT_TYPE_UNKNOWN": 0,
		"SORT_TYPE_ASC":     1,
		"SORT_TYPE_DESC":    2,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_ekko_api_ekko_proto_enumTypes[0].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_ekko_api_ekko_proto_enumTypes[0]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{0}
}

type SubmissionStatus int32

const (
	SubmissionStatus_SUBMISSION_STATUS_UNKNOWN     SubmissionStatus = 0
	SubmissionStatus_SUBMISSION_STATUS_IN_PROGRESS SubmissionStatus = 1
	SubmissionStatus_SUBMISSION_STATUS_FAILED      SubmissionStatus = 2
	SubmissionStatus_SUBMISSION_STATUS_SUCCESS     SubmissionStatus = 3
)

// Enum value maps for SubmissionStatus.
var (
	SubmissionStatus_name = map[int32]string{
		0: "SUBMISSION_STATUS_UNKNOWN",
		1: "SUBMISSION_STATUS_IN_PROGRESS",
		2: "SUBMISSION_STATUS_FAILED",
		3: "SUBMISSION_STATUS_SUCCESS",
	}
	SubmissionStatus_value = map[string]int32{
		"SUBMISSION_STATUS_UNKNOWN":     0,
		"SUBMISSION_STATUS_IN_PROGRESS": 1,
		"SUBMISSION_STATUS_FAILED":      2,
		"SUBMISSION_STATUS_SUCCESS":     3,
	}
)

func (x SubmissionStatus) Enum() *SubmissionStatus {
	p := new(SubmissionStatus)
	*p = x
	return p
}

func (x SubmissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ekko_api_ekko_proto_enumTypes[1].Descriptor()
}

func (SubmissionStatus) Type() protoreflect.EnumType {
	return &file_ekko_api_ekko_proto_enumTypes[1]
}

func (x SubmissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionStatus.Descriptor instead.
func (SubmissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{1}
}

type PublicationStatus int32

const (
	PublicationStatus_PUBLICATION_STATUS_UNKNOWN   PublicationStatus = 0
	PublicationStatus_PUBLICATION_STATUS_DRAFT     PublicationStatus = 1
	PublicationStatus_PUBLICATION_STATUS_PUBLISHED PublicationStatus = 2
)

// Enum value maps for PublicationStatus.
var (
	PublicationStatus_name = map[int32]string{
		0: "PUBLICATION_STATUS_UNKNOWN",
		1: "PUBLICATION_STATUS_DRAFT",
		2: "PUBLICATION_STATUS_PUBLISHED",
	}
	PublicationStatus_value = map[string]int32{
		"PUBLICATION_STATUS_UNKNOWN":   0,
		"PUBLICATION_STATUS_DRAFT":     1,
		"PUBLICATION_STATUS_PUBLISHED": 2,
	}
)

func (x PublicationStatus) Enum() *PublicationStatus {
	p := new(PublicationStatus)
	*p = x
	return p
}

func (x PublicationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ekko_api_ekko_proto_enumTypes[2].Descriptor()
}

func (PublicationStatus) Type() protoreflect.EnumType {
	return &file_ekko_api_ekko_proto_enumTypes[2]
}

func (x PublicationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationStatus.Descriptor instead.
func (PublicationStatus) EnumDescriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{2}
}

type SortMethod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          SortType               `protobuf:"varint,2,opt,name=type,proto3,enum=ekko.SortType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortMethod) Reset() {
	*x = SortMethod{}
	mi := &file_ekko_api_ekko_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortMethod) ProtoMessage() {}

func (x *SortMethod) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortMethod.ProtoReflect.Descriptor instead.
func (*SortMethod) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{0}
}

func (x *SortMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SortMethod) GetType() SortType {
	if x != nil {
		return x.Type
	}
	return SortType_SORT_TYPE_UNKNOWN
}

type TestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{1}
}

type TestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{2}
}

func (x *TestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Answer struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	QuestionId          uint64                 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Answer              string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	Relevance           float32                `protobuf:"fixed32,3,opt,name=relevance,proto3" json:"relevance,omitempty"`
	ClarityCompleteness float32                `protobuf:"fixed32,4,opt,name=clarity_completeness,json=clarityCompleteness,proto3" json:"clarity_completeness,omitempty"`
	Accuracy            float32                `protobuf:"fixed32,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Overall             float32                `protobuf:"fixed32,6,opt,name=overall,proto3" json:"overall,omitempty"`
	Status              SubmissionStatus       `protobuf:"varint,7,opt,name=status,proto3,enum=ekko.SubmissionStatus" json:"status,omitempty"`
	BaseData            *BaseData              `protobuf:"bytes,8,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_ekko_api_ekko_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{3}
}

func (x *Answer) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Answer) GetRelevance() float32 {
	if x != nil {
		return x.Relevance
	}
	return 0
}

func (x *Answer) GetClarityCompleteness() float32 {
	if x != nil {
		return x.ClarityCompleteness
	}
	return 0
}

func (x *Answer) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *Answer) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *Answer) GetStatus() SubmissionStatus {
	if x != nil {
		return x.Status
	}
	return SubmissionStatus_SUBMISSION_STATUS_UNKNOWN
}

func (x *Answer) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

type Attempt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScenarioId    uint64                 `protobuf:"varint,2,opt,name=scenario_id,json=scenarioId,proto3" json:"scenario_id,omitempty"`
	Answers       []*Answer              `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	BaseData      *BaseData              `protobuf:"bytes,4,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	AttemptNumber int32                  `protobuf:"varint,5,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attempt) Reset() {
	*x = Attempt{}
	mi := &file_ekko_api_ekko_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attempt) ProtoMessage() {}

func (x *Attempt) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attempt.ProtoReflect.Descriptor instead.
func (*Attempt) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{4}
}

func (x *Attempt) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attempt) GetScenarioId() uint64 {
	if x != nil {
		return x.ScenarioId
	}
	return 0
}

func (x *Attempt) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *Attempt) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *Attempt) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

type Submission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScenarioId    uint64                 `protobuf:"varint,2,opt,name=scenario_id,json=scenarioId,proto3" json:"scenario_id,omitempty"`
	CandidateId   uint64                 `protobuf:"varint,3,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	Attempts      []*Attempt             `protobuf:"bytes,4,rep,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_ekko_api_ekko_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{5}
}

func (x *Submission) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Submission) GetScenarioId() uint64 {
	if x != nil {
		return x.ScenarioId
	}
	return 0
}

func (x *Submission) GetCandidateId() uint64 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *Submission) GetAttempts() []*Attempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type BaseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	mi := &file_ekko_api_ekko_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{6}
}

func (x *BaseData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BaseData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BaseData      *BaseData              `protobuf:"bytes,3,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_ekko_api_ekko_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{7}
}

func (x *Field) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

type Scenario struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BaseData         *BaseData              `protobuf:"bytes,4,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	Rating           float32                `protobuf:"fixed32,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Fields           []*Field               `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	TotalParticipant int32                  `protobuf:"varint,7,opt,name=total_participant,json=totalParticipant,proto3" json:"total_participant,omitempty"`
	Questions        []*Question            `protobuf:"bytes,8,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Scenario) Reset() {
	*x = Scenario{}
	mi := &file_ekko_api_ekko_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario) ProtoMessage() {}

func (x *Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario.ProtoReflect.Descriptor instead.
func (*Scenario) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{8}
}

func (x *Scenario) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Scenario) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scenario) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Scenario) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *Scenario) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Scenario) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Scenario) GetTotalParticipant() int32 {
	if x != nil {
		return x.TotalParticipant
	}
	return 0
}

func (x *Scenario) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Criteria      string                 `protobuf:"bytes,3,opt,name=criteria,proto3" json:"criteria,omitempty"`
	Hint          string                 `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	BaseData      *BaseData              `protobuf:"bytes,6,opt,name=base_data,json=baseData,proto3" json:"base_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_ekko_api_ekko_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{9}
}

func (x *Question) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Question) GetCriteria() string {
	if x != nil {
		return x.Criteria
	}
	return ""
}

func (x *Question) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetBaseData() *BaseData {
	if x != nil {
		return x.BaseData
	}
	return nil
}

type ListAllSubmissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScenarioId    uint64                 `protobuf:"varint,1,opt,name=scenario_id,json=scenarioId,proto3" json:"scenario_id,omitempty"`
	PageIndex     int32                  `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortMethod    []*SortMethod          `protobuf:"bytes,4,rep,name=sort_method,json=sortMethod,proto3" json:"sort_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllSubmissionRequest) Reset() {
	*x = ListAllSubmissionRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllSubmissionRequest) ProtoMessage() {}

func (x *ListAllSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ListAllSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{10}
}

func (x *ListAllSubmissionRequest) GetScenarioId() uint64 {
	if x != nil {
		return x.ScenarioId
	}
	return 0
}

func (x *ListAllSubmissionRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ListAllSubmissionRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAllSubmissionRequest) GetSortMethod() []*SortMethod {
	if x != nil {
		return x.SortMethod
	}
	return nil
}

type ListAllSubmissionResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Submissions   []*Submission             `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	TotalCount    int32                     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalPage     int32                     `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Request       *ListAllSubmissionRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllSubmissionResponse) Reset() {
	*x = ListAllSubmissionResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllSubmissionResponse) ProtoMessage() {}

func (x *ListAllSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ListAllSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{11}
}

func (x *ListAllSubmissionResponse) GetSubmissions() []*Submission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *ListAllSubmissionResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListAllSubmissionResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListAllSubmissionResponse) GetRequest() *ListAllSubmissionRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type ListAttemptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScenarioId    uint64                 `protobuf:"varint,1,opt,name=scenario_id,json=scenarioId,proto3" json:"scenario_id,omitempty"`
	PageIndex     int32                  `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SortMethod    []*SortMethod          `protobuf:"bytes,4,rep,name=sort_method,json=sortMethod,proto3" json:"sort_method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttemptRequest) Reset() {
	*x = ListAttemptRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttemptRequest) ProtoMessage() {}

func (x *ListAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttemptRequest.ProtoReflect.Descriptor instead.
func (*ListAttemptRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{12}
}

func (x *ListAttemptRequest) GetScenarioId() uint64 {
	if x != nil {
		return x.ScenarioId
	}
	return 0
}

func (x *ListAttemptRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ListAttemptRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAttemptRequest) GetSortMethod() []*SortMethod {
	if x != nil {
		return x.SortMethod
	}
	return nil
}

type ListAttemptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attempts      []*Attempt             `protobuf:"bytes,1,rep,name=attempts,proto3" json:"attempts,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalPage     int32                  `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Request       *ListAttemptRequest    `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttemptResponse) Reset() {
	*x = ListAttemptResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttemptResponse) ProtoMessage() {}

func (x *ListAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttemptResponse.ProtoReflect.Descriptor instead.
func (*ListAttemptResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{13}
}

func (x *ListAttemptResponse) GetAttempts() []*Attempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *ListAttemptResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListAttemptResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListAttemptResponse) GetRequest() *ListAttemptRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetAttemptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttemptRequest) Reset() {
	*x = GetAttemptRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttemptRequest) ProtoMessage() {}

func (x *GetAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttemptRequest.ProtoReflect.Descriptor instead.
func (*GetAttemptRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{14}
}

func (x *GetAttemptRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubmitAnswerRequest struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	ScenarioId    uint64                                 `protobuf:"varint,1,opt,name=scenario_id,json=scenarioId,proto3" json:"scenario_id,omitempty"`
	Answers       []*SubmitAnswerRequest_SubmittedAnswer `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{15}
}

func (x *SubmitAnswerRequest) GetScenarioId() uint64 {
	if x != nil {
		return x.ScenarioId
	}
	return 0
}

func (x *SubmitAnswerRequest) GetAnswers() []*SubmitAnswerRequest_SubmittedAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attempt       *Attempt               `protobuf:"bytes,1,opt,name=attempt,proto3" json:"attempt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{16}
}

func (x *SubmitAnswerResponse) GetAttempt() *Attempt {
	if x != nil {
		return x.Attempt
	}
	return nil
}

type GetAttemptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attempt       *Attempt               `protobuf:"bytes,1,opt,name=attempt,proto3" json:"attempt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttemptResponse) Reset() {
	*x = GetAttemptResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttemptResponse) ProtoMessage() {}

func (x *GetAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttemptResponse.ProtoReflect.Descriptor instead.
func (*GetAttemptResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{17}
}

func (x *GetAttemptResponse) GetAttempt() *Attempt {
	if x != nil {
		return x.Attempt
	}
	return nil
}

type CreateFieldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         *Field                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFieldResponse) Reset() {
	*x = CreateFieldResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldResponse) ProtoMessage() {}

func (x *CreateFieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldResponse.ProtoReflect.Descriptor instead.
func (*CreateFieldResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{18}
}

func (x *CreateFieldResponse) GetField() *Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type CreateFieldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFieldRequest) Reset() {
	*x = CreateFieldRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldRequest) ProtoMessage() {}

func (x *CreateFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldRequest.ProtoReflect.Descriptor instead.
func (*CreateFieldRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{19}
}

func (x *CreateFieldRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateFieldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFieldRequest) Reset() {
	*x = UpdateFieldRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFieldRequest) ProtoMessage() {}

func (x *UpdateFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFieldRequest.ProtoReflect.Descriptor instead.
func (*UpdateFieldRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateFieldRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFieldRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteFieldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []uint64               `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFieldRequest) Reset() {
	*x = DeleteFieldRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFieldRequest) ProtoMessage() {}

func (x *DeleteFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFieldRequest.ProtoReflect.Descriptor instead.
func (*DeleteFieldRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFieldRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListFieldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []uint64               `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SortMethods   []*SortMethod          `protobuf:"bytes,2,rep,name=sort_methods,json=sortMethods,proto3" json:"sort_methods,omitempty"`
	PageIndex     int32                  `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchContent *string                `protobuf:"bytes,5,opt,name=search_content,json=searchContent,proto3,oneof" json:"search_content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFieldRequest) Reset() {
	*x = ListFieldRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFieldRequest) ProtoMessage() {}

func (x *ListFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFieldRequest.ProtoReflect.Descriptor instead.
func (*ListFieldRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{22}
}

func (x *ListFieldRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListFieldRequest) GetSortMethods() []*SortMethod {
	if x != nil {
		return x.SortMethods
	}
	return nil
}

func (x *ListFieldRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ListFieldRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFieldRequest) GetSearchContent() string {
	if x != nil && x.SearchContent != nil {
		return *x.SearchContent
	}
	return ""
}

type ListFieldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*Field               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalPage     int32                  `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Request       *ListFieldRequest      `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFieldResponse) Reset() {
	*x = ListFieldResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFieldResponse) ProtoMessage() {}

func (x *ListFieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFieldResponse.ProtoReflect.Descriptor instead.
func (*ListFieldResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{23}
}

func (x *ListFieldResponse) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListFieldResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListFieldResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListFieldResponse) GetRequest() *ListFieldRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FieldIds      []uint64               `protobuf:"varint,3,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	Questions     []*ScenarioQuestion    `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateScenarioRequest) Reset() {
	*x = CreateScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScenarioRequest) ProtoMessage() {}

func (x *CreateScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScenarioRequest.ProtoReflect.Descriptor instead.
func (*CreateScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{24}
}

func (x *CreateScenarioRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateScenarioRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateScenarioRequest) GetFieldIds() []uint64 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *CreateScenarioRequest) GetQuestions() []*ScenarioQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type CreateScenarioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scenario      *Scenario              `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateScenarioResponse) Reset() {
	*x = CreateScenarioResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScenarioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScenarioResponse) ProtoMessage() {}

func (x *CreateScenarioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScenarioResponse.ProtoReflect.Descriptor instead.
func (*CreateScenarioResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{25}
}

func (x *CreateScenarioResponse) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type UpdateScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Fields        []*Field               `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	Questions     []*ScenarioQuestion    `protobuf:"bytes,5,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScenarioRequest) Reset() {
	*x = UpdateScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScenarioRequest) ProtoMessage() {}

func (x *UpdateScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScenarioRequest.ProtoReflect.Descriptor instead.
func (*UpdateScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateScenarioRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScenarioRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateScenarioRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateScenarioRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateScenarioRequest) GetQuestions() []*ScenarioQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type ScenarioQuestion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Criteria      string                 `protobuf:"bytes,1,opt,name=criteria,proto3" json:"criteria,omitempty"`
	Hint          string                 `protobuf:"bytes,2,opt,name=hint,proto3" json:"hint,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenarioQuestion) Reset() {
	*x = ScenarioQuestion{}
	mi := &file_ekko_api_ekko_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioQuestion) ProtoMessage() {}

func (x *ScenarioQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioQuestion.ProtoReflect.Descriptor instead.
func (*ScenarioQuestion) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{27}
}

func (x *ScenarioQuestion) GetCriteria() string {
	if x != nil {
		return x.Criteria
	}
	return ""
}

func (x *ScenarioQuestion) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ScenarioQuestion) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []uint64               `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScenarioRequest) Reset() {
	*x = DeleteScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScenarioRequest) ProtoMessage() {}

func (x *DeleteScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScenarioRequest.ProtoReflect.Descriptor instead.
func (*DeleteScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteScenarioRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BmIds         []uint64               `protobuf:"varint,1,rep,packed,name=bm_ids,json=bmIds,proto3" json:"bm_ids,omitempty"`
	SearchContent *string                `protobuf:"bytes,2,opt,name=search_content,json=searchContent,proto3,oneof" json:"search_content,omitempty"`
	SortMethods   []*SortMethod          `protobuf:"bytes,3,rep,name=sort_methods,json=sortMethods,proto3" json:"sort_methods,omitempty"`
	PageIndex     int32                  `protobuf:"varint,4,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	IsFavorite    *bool                  `protobuf:"varint,6,opt,name=is_favorite,json=isFavorite,proto3,oneof" json:"is_favorite,omitempty"`
	IsFinished    *bool                  `protobuf:"varint,7,opt,name=is_finished,json=isFinished,proto3,oneof" json:"is_finished,omitempty"`
	FieldIds      []uint64               `protobuf:"varint,8,rep,packed,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScenarioRequest) Reset() {
	*x = ListScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScenarioRequest) ProtoMessage() {}

func (x *ListScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScenarioRequest.ProtoReflect.Descriptor instead.
func (*ListScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{29}
}

func (x *ListScenarioRequest) GetBmIds() []uint64 {
	if x != nil {
		return x.BmIds
	}
	return nil
}

func (x *ListScenarioRequest) GetSearchContent() string {
	if x != nil && x.SearchContent != nil {
		return *x.SearchContent
	}
	return ""
}

func (x *ListScenarioRequest) GetSortMethods() []*SortMethod {
	if x != nil {
		return x.SortMethods
	}
	return nil
}

func (x *ListScenarioRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ListScenarioRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListScenarioRequest) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

func (x *ListScenarioRequest) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ListScenarioRequest) GetFieldIds() []uint64 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

type ListScenarioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scenario      []*Scenario            `protobuf:"bytes,1,rep,name=scenario,proto3" json:"scenario,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalPage     int32                  `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Request       *ListScenarioRequest   `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScenarioResponse) Reset() {
	*x = ListScenarioResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScenarioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScenarioResponse) ProtoMessage() {}

func (x *ListScenarioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScenarioResponse.ProtoReflect.Descriptor instead.
func (*ListScenarioResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{30}
}

func (x *ListScenarioResponse) GetScenario() []*Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *ListScenarioResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListScenarioResponse) GetTotalPage() int32 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ListScenarioResponse) GetRequest() *ListScenarioRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScenarioRequest) Reset() {
	*x = GetScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioRequest) ProtoMessage() {}

func (x *GetScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioRequest.ProtoReflect.Descriptor instead.
func (*GetScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{31}
}

func (x *GetScenarioRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetScenarioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scenario      *Scenario              `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScenarioResponse) Reset() {
	*x = GetScenarioResponse{}
	mi := &file_ekko_api_ekko_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScenarioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScenarioResponse) ProtoMessage() {}

func (x *GetScenarioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScenarioResponse.ProtoReflect.Descriptor instead.
func (*GetScenarioResponse) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{32}
}

func (x *GetScenarioResponse) GetScenario() *Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

type FavoriteScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FavoriteScenarioRequest) Reset() {
	*x = FavoriteScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavoriteScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteScenarioRequest) ProtoMessage() {}

func (x *FavoriteScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteScenarioRequest.ProtoReflect.Descriptor instead.
func (*FavoriteScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{33}
}

func (x *FavoriteScenarioRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RatingScenarioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rating        float32                `protobuf:"fixed32,2,opt,name=rating,proto3" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatingScenarioRequest) Reset() {
	*x = RatingScenarioRequest{}
	mi := &file_ekko_api_ekko_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatingScenarioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingScenarioRequest) ProtoMessage() {}

func (x *RatingScenarioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingScenarioRequest.ProtoReflect.Descriptor instead.
func (*RatingScenarioRequest) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{34}
}

func (x *RatingScenarioRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RatingScenarioRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type SubmitAnswerRequest_SubmittedAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    uint64                 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest_SubmittedAnswer) Reset() {
	*x = SubmitAnswerRequest_SubmittedAnswer{}
	mi := &file_ekko_api_ekko_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest_SubmittedAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest_SubmittedAnswer) ProtoMessage() {}

func (x *SubmitAnswerRequest_SubmittedAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_ekko_api_ekko_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest_SubmittedAnswer.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest_SubmittedAnswer) Descriptor() ([]byte, []int) {
	return file_ekko_api_ekko_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SubmitAnswerRequest_SubmittedAnswer) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *SubmitAnswerRequest_SubmittedAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

var File_ekko_api_ekko_proto protoreflect.FileDescriptor

var file_ekko_api_ekko_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x65, 0x6b, 0x6b, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x4d, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x0d, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28,
	0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xb6, 0x01, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x58, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xbc, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x0b,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0xc9, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xc7, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x1a, 0x4a,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x14, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x38, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0xe6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0b, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22,
	0xb8, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x10, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xb7, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x22, 0x29, 0x0a, 0x17, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0xa0, 0x40,
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2a, 0x48, 0x0a,
	0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x2a, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x11, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02,
	0x32, 0xbf, 0x0a, 0x0a, 0x04, 0x65, 0x6b, 0x6b, 0x6f, 0x12, 0x61, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1b,
	0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1b, 0x2e,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f,
	0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1b, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x65, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x19, 0x2e,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1d, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x65, 0x6b, 0x6b,
	0x6f, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x1b, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x18, 0x2e, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x65, 0x6b,
	0x6b, 0x6f, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x17, 0x2e,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x65, 0x6b,
	0x6b, 0x6f, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x5e, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x65,
	0x6b, 0x6b, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x76, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x65, 0x6b,
	0x6b, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x32, 0xca, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x60, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x16, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x12, 0x19, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x6e, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x18, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x42,
	0x0f, 0x5a, 0x0d, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x65, 0x6b, 0x6b, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ekko_api_ekko_proto_rawDescOnce sync.Once
	file_ekko_api_ekko_proto_rawDescData []byte
)

func file_ekko_api_ekko_proto_rawDescGZIP() []byte {
	file_ekko_api_ekko_proto_rawDescOnce.Do(func() {
		file_ekko_api_ekko_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ekko_api_ekko_proto_rawDesc), len(file_ekko_api_ekko_proto_rawDesc)))
	})
	return file_ekko_api_ekko_proto_rawDescData
}

var file_ekko_api_ekko_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ekko_api_ekko_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_ekko_api_ekko_proto_goTypes = []any{
	(SortType)(0),                               // 0: ekko.SortType
	(SubmissionStatus)(0),                       // 1: ekko.SubmissionStatus
	(PublicationStatus)(0),                      // 2: ekko.PublicationStatus
	(*SortMethod)(nil),                          // 3: ekko.SortMethod
	(*TestRequest)(nil),                         // 4: ekko.TestRequest
	(*TestResponse)(nil),                        // 5: ekko.TestResponse
	(*Answer)(nil),                              // 6: ekko.Answer
	(*Attempt)(nil),                             // 7: ekko.Attempt
	(*Submission)(nil),                          // 8: ekko.Submission
	(*BaseData)(nil),                            // 9: ekko.BaseData
	(*Field)(nil),                               // 10: ekko.Field
	(*Scenario)(nil),                            // 11: ekko.Scenario
	(*Question)(nil),                            // 12: ekko.Question
	(*ListAllSubmissionRequest)(nil),            // 13: ekko.ListAllSubmissionRequest
	(*ListAllSubmissionResponse)(nil),           // 14: ekko.ListAllSubmissionResponse
	(*ListAttemptRequest)(nil),                  // 15: ekko.ListAttemptRequest
	(*ListAttemptResponse)(nil),                 // 16: ekko.ListAttemptResponse
	(*GetAttemptRequest)(nil),                   // 17: ekko.GetAttemptRequest
	(*SubmitAnswerRequest)(nil),                 // 18: ekko.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),                // 19: ekko.SubmitAnswerResponse
	(*GetAttemptResponse)(nil),                  // 20: ekko.GetAttemptResponse
	(*CreateFieldResponse)(nil),                 // 21: ekko.CreateFieldResponse
	(*CreateFieldRequest)(nil),                  // 22: ekko.CreateFieldRequest
	(*UpdateFieldRequest)(nil),                  // 23: ekko.UpdateFieldRequest
	(*DeleteFieldRequest)(nil),                  // 24: ekko.DeleteFieldRequest
	(*ListFieldRequest)(nil),                    // 25: ekko.ListFieldRequest
	(*ListFieldResponse)(nil),                   // 26: ekko.ListFieldResponse
	(*CreateScenarioRequest)(nil),               // 27: ekko.CreateScenarioRequest
	(*CreateScenarioResponse)(nil),              // 28: ekko.CreateScenarioResponse
	(*UpdateScenarioRequest)(nil),               // 29: ekko.UpdateScenarioRequest
	(*ScenarioQuestion)(nil),                    // 30: ekko.ScenarioQuestion
	(*DeleteScenarioRequest)(nil),               // 31: ekko.DeleteScenarioRequest
	(*ListScenarioRequest)(nil),                 // 32: ekko.ListScenarioRequest
	(*ListScenarioResponse)(nil),                // 33: ekko.ListScenarioResponse
	(*GetScenarioRequest)(nil),                  // 34: ekko.GetScenarioRequest
	(*GetScenarioResponse)(nil),                 // 35: ekko.GetScenarioResponse
	(*FavoriteScenarioRequest)(nil),             // 36: ekko.FavoriteScenarioRequest
	(*RatingScenarioRequest)(nil),               // 37: ekko.RatingScenarioRequest
	(*SubmitAnswerRequest_SubmittedAnswer)(nil), // 38: ekko.SubmitAnswerRequest.SubmittedAnswer
	(*timestamppb.Timestamp)(nil),               // 39: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 40: google.protobuf.Empty
}
var file_ekko_api_ekko_proto_depIdxs = []int32{
	0,  // 0: ekko.SortMethod.type:type_name -> ekko.SortType
	1,  // 1: ekko.Answer.status:type_name -> ekko.SubmissionStatus
	9,  // 2: ekko.Answer.base_data:type_name -> ekko.BaseData
	6,  // 3: ekko.Attempt.answers:type_name -> ekko.Answer
	9,  // 4: ekko.Attempt.base_data:type_name -> ekko.BaseData
	7,  // 5: ekko.Submission.attempts:type_name -> ekko.Attempt
	39, // 6: ekko.BaseData.created_at:type_name -> google.protobuf.Timestamp
	39, // 7: ekko.BaseData.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 8: ekko.Field.base_data:type_name -> ekko.BaseData
	9,  // 9: ekko.Scenario.base_data:type_name -> ekko.BaseData
	10, // 10: ekko.Scenario.fields:type_name -> ekko.Field
	12, // 11: ekko.Scenario.questions:type_name -> ekko.Question
	9,  // 12: ekko.Question.base_data:type_name -> ekko.BaseData
	3,  // 13: ekko.ListAllSubmissionRequest.sort_method:type_name -> ekko.SortMethod
	8,  // 14: ekko.ListAllSubmissionResponse.submissions:type_name -> ekko.Submission
	13, // 15: ekko.ListAllSubmissionResponse.request:type_name -> ekko.ListAllSubmissionRequest
	3,  // 16: ekko.ListAttemptRequest.sort_method:type_name -> ekko.SortMethod
	7,  // 17: ekko.ListAttemptResponse.attempts:type_name -> ekko.Attempt
	15, // 18: ekko.ListAttemptResponse.request:type_name -> ekko.ListAttemptRequest
	38, // 19: ekko.SubmitAnswerRequest.answers:type_name -> ekko.SubmitAnswerRequest.SubmittedAnswer
	7,  // 20: ekko.SubmitAnswerResponse.attempt:type_name -> ekko.Attempt
	7,  // 21: ekko.GetAttemptResponse.attempt:type_name -> ekko.Attempt
	10, // 22: ekko.CreateFieldResponse.field:type_name -> ekko.Field
	3,  // 23: ekko.ListFieldRequest.sort_methods:type_name -> ekko.SortMethod
	10, // 24: ekko.ListFieldResponse.fields:type_name -> ekko.Field
	25, // 25: ekko.ListFieldResponse.request:type_name -> ekko.ListFieldRequest
	30, // 26: ekko.CreateScenarioRequest.questions:type_name -> ekko.ScenarioQuestion
	11, // 27: ekko.CreateScenarioResponse.scenario:type_name -> ekko.Scenario
	10, // 28: ekko.UpdateScenarioRequest.fields:type_name -> ekko.Field
	30, // 29: ekko.UpdateScenarioRequest.questions:type_name -> ekko.ScenarioQuestion
	3,  // 30: ekko.ListScenarioRequest.sort_methods:type_name -> ekko.SortMethod
	11, // 31: ekko.ListScenarioResponse.scenario:type_name -> ekko.Scenario
	32, // 32: ekko.ListScenarioResponse.request:type_name -> ekko.ListScenarioRequest
	11, // 33: ekko.GetScenarioResponse.scenario:type_name -> ekko.Scenario
	22, // 34: ekko.ekko.CreateField:input_type -> ekko.CreateFieldRequest
	23, // 35: ekko.ekko.UpdateField:input_type -> ekko.UpdateFieldRequest
	24, // 36: ekko.ekko.DeleteField:input_type -> ekko.DeleteFieldRequest
	27, // 37: ekko.ekko.CreateScenario:input_type -> ekko.CreateScenarioRequest
	29, // 38: ekko.ekko.UpdateScenario:input_type -> ekko.UpdateScenarioRequest
	31, // 39: ekko.ekko.DeleteScenario:input_type -> ekko.DeleteScenarioRequest
	32, // 40: ekko.ekko.ListScenario:input_type -> ekko.ListScenarioRequest
	36, // 41: ekko.ekko.FavoriteScenario:input_type -> ekko.FavoriteScenarioRequest
	37, // 42: ekko.ekko.RatingScenario:input_type -> ekko.RatingScenarioRequest
	15, // 43: ekko.ekko.ListAttempt:input_type -> ekko.ListAttemptRequest
	17, // 44: ekko.ekko.GetAttempt:input_type -> ekko.GetAttemptRequest
	18, // 45: ekko.ekko.SubmitAnswer:input_type -> ekko.SubmitAnswerRequest
	13, // 46: ekko.ekko.ListAllSubmission:input_type -> ekko.ListAllSubmissionRequest
	25, // 47: ekko.Chronobreak.ListField:input_type -> ekko.ListFieldRequest
	32, // 48: ekko.Chronobreak.ListScenario:input_type -> ekko.ListScenarioRequest
	34, // 49: ekko.Chronobreak.GetScenario:input_type -> ekko.GetScenarioRequest
	21, // 50: ekko.ekko.CreateField:output_type -> ekko.CreateFieldResponse
	40, // 51: ekko.ekko.UpdateField:output_type -> google.protobuf.Empty
	40, // 52: ekko.ekko.DeleteField:output_type -> google.protobuf.Empty
	28, // 53: ekko.ekko.CreateScenario:output_type -> ekko.CreateScenarioResponse
	40, // 54: ekko.ekko.UpdateScenario:output_type -> google.protobuf.Empty
	40, // 55: ekko.ekko.DeleteScenario:output_type -> google.protobuf.Empty
	33, // 56: ekko.ekko.ListScenario:output_type -> ekko.ListScenarioResponse
	40, // 57: ekko.ekko.FavoriteScenario:output_type -> google.protobuf.Empty
	40, // 58: ekko.ekko.RatingScenario:output_type -> google.protobuf.Empty
	16, // 59: ekko.ekko.ListAttempt:output_type -> ekko.ListAttemptResponse
	20, // 60: ekko.ekko.GetAttempt:output_type -> ekko.GetAttemptResponse
	19, // 61: ekko.ekko.SubmitAnswer:output_type -> ekko.SubmitAnswerResponse
	14, // 62: ekko.ekko.ListAllSubmission:output_type -> ekko.ListAllSubmissionResponse
	26, // 63: ekko.Chronobreak.ListField:output_type -> ekko.ListFieldResponse
	33, // 64: ekko.Chronobreak.ListScenario:output_type -> ekko.ListScenarioResponse
	35, // 65: ekko.Chronobreak.GetScenario:output_type -> ekko.GetScenarioResponse
	50, // [50:66] is the sub-list for method output_type
	34, // [34:50] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_ekko_api_ekko_proto_init() }
func file_ekko_api_ekko_proto_init() {
	if File_ekko_api_ekko_proto != nil {
		return
	}
	file_ekko_api_ekko_proto_msgTypes[22].OneofWrappers = []any{}
	file_ekko_api_ekko_proto_msgTypes[29].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ekko_api_ekko_proto_rawDesc), len(file_ekko_api_ekko_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ekko_api_ekko_proto_goTypes,
		DependencyIndexes: file_ekko_api_ekko_proto_depIdxs,
		EnumInfos:         file_ekko_api_ekko_proto_enumTypes,
		MessageInfos:      file_ekko_api_ekko_proto_msgTypes,
	}.Build()
	File_ekko_api_ekko_proto = out.File
	file_ekko_api_ekko_proto_goTypes = nil
	file_ekko_api_ekko_proto_depIdxs = nil
}
